复习 :
1. 节点操作
	获取元素节点
	操作节点属性
	操作节点样式 (行内样式) : div.style.background = "";
	节点层次属性 :
		1. parentNode
		2. childNodes / children(返回直接子元素)
		3. nextSibling / nextElementSibling
		4. previousSibling / previousElementSibling
		5. attributes 属性节点的数组
	节点创建,增加,删除
		1. 创建
				document.createElement('');
				document.createTextNode('');
				文本节点是元素节点的子节点
		2. 所有body标签中的内容就是显示在网页窗口中的内容
			 添加节点 :
				parentNode.appendChild();
				parentNode.insertBefore(new,old);
		3. 移除 
				parentNode.removeChild();
2. 事件操作
	 事件 : 用户行为触发的操作
	 事件处理函数 :
		系统提供的,由用户行为触发自动调用
		我们负责函数的实现
	 分类 :
		window.onload = function(){
			//等待页面加载完毕后执行获取元素的操作	
		};
		鼠标事件 :
			onclick
			ondblclick
			onmouseover
			onmousemove
			onmouseout
		键盘事件 :
			onkeydown
			onkeypress
			onkeyup
		表单事件 :
			文本框 :
				onfocus  获取焦点
				onblur   失去焦点
				oninput  实时监听用户输入
				onchange 监听前后内容是否变化,只有失去焦点并且
								 内容不一致时才触发
			form :
				onsubmit 用户点击提交(submit)按钮时自动触发
								 由form监听,触发之后,用来做数据提交前
								 最后一步判断,允许返回布尔值,true表示
								 数据可以提交,false表示不允许发送
	事件绑定方式 :
		1. 元素内联绑定
				事件处理函数作为标签属性绑定在元素上
		2. JS动态绑定
				div.onclick = function(){};
		3. W3C 标准事件监听
				div.addEventListener('click',function,false);
	事件对象 :
		包含当前事件相关的信息,伴随事件触发自动产生,
		由浏览器自动以参数形式传入事件处理函数中
		div.onclick = function (evt){};
		常用属性 :
			1. target 
				 获取当前事件的触发元素
			2. 鼠标事件对象 :
					1. offsetX offsetY 
						 鼠标在元素内部的坐标位置
					2. clientX clientY
						 网页中的坐标位置
					3. screenX screenY
						 屏幕坐标系中的位置
---------------------------------------------
day13
1. 事件对象常用属性
	1. 键盘事件对象
			onkeydown
				which属性 :
					获取当前按键的编码值 : 键盘上所有按键都对应有
					自己的码值(键码),数字和字母的编码值与ASC对照
					一致,不区分大小写,统一返回大写字母的码值
			onkeypress
				只有在键盘输入内容(数字,字母,字符)才会触发,键盘
				上的功能键(大写锁定..)不会触发
				which属性 :
					返回按键字符对应的ASC码,区分大小写
				key属性 :
					返回当前键位表示的字符
2. 事件传递机制
	 1. 事件传递 :
			当页面上某一个元素被点击,相关的元素都能接收到事件,
			可以选择是否处理
	 2. 事件传递机制 :
			实际上事件传递给相关元素的顺序
			默认 : 从触发元素开始逐级向外传递,冒泡传递
			特殊 : 捕获传递,事件发生后,从外向里逐级传递
						 IE浏览器不支持捕获,默认机制为冒泡
						 addEventListener("click",funtion,false);
							false : 冒泡传递(默认)
							true :  捕获传递,IE不支持
	 3. 阻止事件传递
			通过事件对象阻止事件向其他元素传递
			evt.stopPropagation();
jQuery
	1. 介绍 :
		jQuery是JS的工具库,通过封装原生的JS方法,简化JS操作.
		write less , do more
		版本 :
			1.xx.xx 兼容IE6,7,8
			2.xx.xx 不再兼容IE6,7,8
		功能和优势 :
			1. 简化DOM操作
			2. 可以直接通过选择器设置元素样式
			3. 链式调用(核心)
			4. 事件处理更加简便
			--------------------
			5. Ajax技术更加完善(网络请求)
			6. 提供各种插件可供使用
			7. 允许自定义插件使用
	2. 使用 :
		1. 引入jQuery文件
			 <script src=""></script>
		2. 使用jQuery 
			 引入操作必须在代码之前,先引入,才能使用jQuery语法
			 1. jQuery对象
					jQuery通过封装,将原生的DOM对象包装成jQuery对象
					原生对象用原生的方法
					jQuery对象使用jQuery的方法,不能混用
			 2. jQuery对象以$与原生的方法区分
		   3. 工厂函数 - $()
					$是jQuery对象的标志
					$() : 支持传递字符串参数,用于获取元素节点
								可以根据选择器匹配并返回元素(jQuery对象)		 
			 4. 原生JS对象与jQuery对象互相转换
					1. DOM 转换 jQuery对象
						 使用$()包装原生DOM对象,返回jQuery对象
						 et :
							 var h1 = document.getElementsByTagName('h1')[0];
							 var $h1 = $(h1);
					2. jQuery 转换 DOM 对象
							var h1 = $('h1')[0];
							var h1 = $('h1').get(0);
	3. jquery选择器 :
		1. 使用选择器获取jQuery对象
		2. 语法 :
				$("选择器")
		3. 分类 :
			1. 基础选择器
				1. 标签选择器
					$("div")
					根据标签名获取元素
				2. id选择器
					$("#id")
					根据id选择器获取元素
				3. 类选择器
					$(".className")
					根据类选择器,匹配并获取元素
				4. 群组选择器
					$("selector1,selector2");
					根据群组选择器获取元素
			2. 层级选择器
				 1. 后代选择器
						$("selector1 selector2");
						匹配后代元素
				 2. 子选择器
						$("selector1>selector2");
					  匹配直接子元素
				 3. 相邻兄弟选择器
						$("selector1+selector2");
						匹配紧跟在selector1后的一个兄弟元素,且满足selector2
						否则匹配失败
				 4. 通用兄弟选择器
						$("selector1~selector2");
						匹配selector1后面所有满足selector2的兄弟元素
		  3. 过滤选择器
				1. :first
					 匹配一组元素中的第一个元素
					 et :
							$("p:first")
				2. :last
					 匹配一组元素中的最后一个元素
					 et :
							$("p:last")
				3. :not()
					 否定筛选,匹配除()中列出的元素外,所有元素
					 et :
							$(":not(selector1,selector2)")
				4. :odd
					 匹配偶数行对应的元素
					 et :
							$("p:odd")
				5. :even
					 匹配奇数行对应的元素
					 et :
							$("p:even")
				6. :eq(index)
					 匹配指定下标对应的元素
					 et :
							$("p:eq(2)");
				7. :lt(index)
					 匹配下标小于index的元素
				8. :gt(index)
					 匹配下标大于index的元素
			4. 属性选择器
				 根据元素的标签属性获取元素
				 $("selector")
				 1. [attribute]
						获取属性名为attribute的元素
						et :
							$("[id]") 包含id属性的元素
				 2. [attribute=value]
						获取属性名等于attribute,属性值为value的元素
						et :
							$("[id=d1]")
							$("[id='d1']")
							<p id="d1"></p>
				 3. [attribute!=value]
						匹配属性值不等于value的元素
				 4. [attribute^=value]
						匹配属性值以value开头的元素
				 5. [attribute$=value]
						匹配属性值以value结尾的元素
				 6. [attribute*=value]
						匹配属性值中存在value的元素
			5. 子元素过滤选择器
				1. :first-child
					 匹配属于其父元素中的第一个子元素
					 et :
						$("p:first-child")
				2. :last-child
					 匹配属于其父元素中的最后一个子元素
				3. :nth-child(n)
					 匹配属于其父元素中的第n个子元素
	4. jquery操作节点
		1. 基本操作(标签内容的操作)
			1. html("")
				 为元素设置标签内容,可以识别标签
				 等价于原生的innerHTML
			2. text("")
				 为元素设置文本内容,不能识别标签
				 等价于原生的innerText
			3. val()
				 用来设置或读取文本框或表单控件的值
			练习 :
				1. 创建文本框,设置id属性
				2. 创建按钮,显示文本不限
				3. 创建div,实现点击按钮时,将文本框的输入内容
					 以一级标题的形式显示在div中
			4. attr()
				设置或读取指定的标签属性
				$("div").attr("id","d1");
				console.log($("div").attr("id"));
			5. removeAttr("")
				移除指定的属性,参数为属性名
		2. 样式操作
			1. attr()
				动态添加id/class属性,对应选择器为元素设置样式
			2. 针对类选择器的样式 :
				1. addClass("classValue")
					 添加class属性值,对应类选择器样式
				2. removeClass("classValue");
					 移除指定的class属性值
				3. toggleClass("classValue");
					 动态切换类选择器的样式
					 存在则删除
					 不存在则添加
			
				 

				 
				 

				
				
					

				
				 

				 

		








					
			
				

		
		
		

		

	

