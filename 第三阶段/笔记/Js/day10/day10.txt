复习 :
1. 函数
	1. 语法
			function 函数名(参数){
				代码段
				return 返回值
			}
			函数名();
			var fn = function (){};
			fn();
			匿名函数自执行
			(function (){})();
	2. 变量分类
		1. 全局变量
				在函数外部使用var关键字,或省略var关键字定义的变量
				在程序任何地方都可以使用
		2. 局部变量
				在函数内部使用var关键字定义的变量是局部变量
				只在当前函数作用域中可以访问
2. 数组
	1. 语法
		var arr = [];
		var arr2 = new Array(10,203,30);
		var arr3 = new Array(5);//预分配数组长度
		arr3[10] = 100;
	2. 遍历数组
		for(var i = 0;i < arr.length;i ++){
			arr[i];
		}
		for(var i = arr.length-1;i >= 0;i --){
			arr[i];
		}
	3. 属性和方法
		1. 属性 : arr.length 获取数组长度
		2. 方法 :
				1. 转字符串 :
						toString();
						join("");
				2. 改变原始数组
						reverse();
						sort(); //根据Unicode码升序排列
				3. 操作头尾元素
					1. 操作数组尾部元素
						push(data1,data2); //返回长度
						pop();//返回删除元素
					2. 操作头部元素
						unshift();
						shift();
--------------------------
day10
1. String 字符串
	1. 语法 :
		var str1 = "";
		var str2 = new String("hello");
	2. 属性和方法
		1. 属性 :
			length : 获取字符串长度(字符个数)
			遍历字符串 :
				由于字符串也是类数组结构,每个字符都会分配下标,
				可以按照数组访问元素的方式访问字符
				for(var i = 0; i < str.length; i ++){
					console.log(str[i]);
				}
		2. 常用方法
			1. 转换大小写(英文字母)
				1. toUpperCase()
						转换大写字母,返回新的字符串
				2. toLowerCase()
						转换小写字母,返回新的字符串
				练习 :
					模拟验证码操作 :
						1. 创建数组,由数字,字母组成
						2. 生成随机验证码(4位)
								随机数 : Math.random() [0 ~ 1)
							  随机下标 :
									1. [0,length)
									2. 取整
						3. 提示用户输入验证码
						4. 验证用户输入正确与否,返回提示信息
			2. 获取指定字符
				1. charCodeAt(index)
						获取指定位置字符的Unicode码,参数省略表示获取
						第一个字符
				2. charAt(index)
						获取指定下标位置的字符
			3. 检索字符串
					获取指定字符的下标
					1. indexOf(value[,fromIndex])
							参数 :
								value : 必填,指定查找字符
								fromIndex : 可选,指定起始位置
							返回值 :
								查找成功,返回第一次出现的下标
								查找失败,返回-1,表示不存在
					2. lastIndexOf(value[,fromIndex])
						  返回值 : 返回指定字符最后一次出现的下标
							参数 :
								value : 指定查找字符
								fromindex : 指定起始位置
							注意 :
								1. 字符串中字符的下标一经定义就不会改变
								2. lastIndexOf()的查找方向,从后向前查找,
									 找字符在字符串中最后一次的出现位置,
									 返回下标
								3. 指定字符,大小写敏感
			4. 截取字符串
					substring(startIndex,endIndex)
					根据指定的开始下标截取,截取至endIndex(不包含)
					参数 :
						endIndex可以省略,省略结束下标,表示截至末尾
					返回 : [startIndex,endIndex)之间的子字符串
					练习 :
						1. 截取邮箱中的的用户名和服务商
								zhangsan100@163.com
						2. 提取身份证信息(年月日)
								10032219001206478X
			5. 分割字符串
					split(seperator);
					方法 : 根据指定的符号(字符串中存在的)将字符串
									分割成若干小字符串
					参数 : 指定字符
					返回值 : 数组,数组中存放若干子字符串
					练习 :
						分割URL 
							"101_5&102_10&221_3"
							 商品ID 101
							 商品数量 5
			6. 模式匹配
				1. 结合正则表达式实现查找或替换字符串中的指定字符
				2. 正则表达式
						var reg1 = /\d{3,5}/;
						var reg2 = /hello/;
						模式修饰符 :
							i : ignore case 忽略大小写
							g : global 全局匹配
						et :
							var reg3 = /你好/ig;
				3. 方法 :
					1. match(substr|RegExp)
							根据指定的字符串或正则模式,查找字符串内容,
							返回数组,保存匹配结果
					2. replace(substr|RegExp,newString)
							根据正则模式查找内容,并且使用newString替换
							返回替换后的字符串
					练习 :
						Microsoft is a big company,microsoft is a big company
            MicROsoft is a big company
						要求将所有的Microsoft替换成中文"微软"
						并输出替换了多少次
2. RegExp 正则表达式
	 1. 正则表达式 Regular Expression
			设置模式,匹配或验证字符串格式
	 2. 创建正则
			1. var reg1 = /^\d{6}/ig;
			2. var reg2 = new RegExp("模式","修饰符");
		     注意 : 元字符中的转义\,在字符串表示时,需要多加一个\
				 var reg3 = new RegExp("\\d{6}","i");
	 3. 属性与方法
			1. 属性 : lastIndex
				 指定下一次匹配的起始索引,只有在设置了全局匹配
				 才起作用
				 原则上,同一个正则表达式不要重复验证,lastIndex
				 每次起始索引不同,影响验证结果
				 但是,可以手动修改lastIndex为0,保证每次都从0位置
				 查找字符
			2. 方法 :
					test(param)
					参数为要验证的字符串
					返回值 : true/false 表示字符串中是否包含
									 满足正则模式的内容
3. Math   数学对象
	 提供一系列数学方法
	 1. 属性
			数学常量 :
				Math.PI : 圆周率/180deg
				Math.E  : 自然对数
	 2. 方法 :
		 1. 三角函数
				Math.sin(deg)
				Math.cos()
				Math.tan()
				注意 : 参数为度数,可以使用Math.PI(180deg)
							 进行转换;
							 涉及小数可能存在误差
		 2. 计算函数
				Math.sqrt(x);  对x开平方
				Math.pow(x,y); 求x的y次方
			  Math.log(x);	 求对数
		 3. 数值函数(较常用)
				Math.abs(x);		求x的绝对值
				Math.max(n1,n2,n3...,n10); 求一组数据中的最大值
				Math.min(n1,n2,n3) 求一组数据的最小值
				Math.random()		获取[0,1)之间的随机数
				Math.ceil(x)    对x向上取整
				Math.floor(x)   对x向下取整,舍弃小数位
				Math.round(x)		对x四舍五入取整数
4. Date   日期对象
	1. 提供获取客户端时间与日期的方法
	2. 创建日期对象
		 var date1 = new Date(); //获取当前系统时间
		 //根据指定的日期时间创建对象
		 var date2 = new Date("2018-11-11 10:10:10");
	3. 方法 :
		1. 设置或获取当前时间的毫秒数(了解)
				1. getTime()
					获取当前日期对象距离1970-01-01 00:00:00之间的
					毫秒数
				2. setTime(毫秒数);
					根据指定的毫秒数,结合1970-01-01 00:00:00计算日期
		2. 获取时间分量(重点)
			1. getFullYear()
				获取当前日期对象中的年份信息
				四位年份数字
			2. getMonth()
				获取日期对象中的月份信息
				返回值 0-11 对应12个月,需要+1显示
			3. getDate()
				获取日期对象中的日子信息
				返回值 正常号数
			4. getDay()
				获取日期对象中的星期信息
				返回值 0-6 对应周日-周六
			5. 获取时间
				getHours()   获取小时数
				getMinutes() 获取分钟数
				getSeconds() 获取秒数
				getMilliseconds() 获取毫秒数
			练习 :
				获取系统日期时间
				按照以下格式输出显示 :
					xxxx年xx月xx日 xx时xx分xx秒 星期x

			6. 将日期对象转换为指定的字符串格式输出
				1. toString();
				2. toLocaleString(); 
						以本地日期格式输出
						2018/11/20 下午5:21:43
				3. toLocaleDateString();
						
				4. toLocaleTimeString();
外置对象
 1. BOM
		浏览器对象模型,提供操作浏览器相关的属性和方法
		学习BOM主要围绕JS顶层对象 window ,学习window
		对象的属性和方法.
		window对象跟随浏览器运行自动产生,每个窗口都对应有
		自己的window对象,window对象可以省略,直接使用相关
		属性和方法
		1. window对象
			跟随网页运行自动创建,表示当前窗口对象
			所有的全局变量和函数,都是window对象的属性和方法
			对话框都是window对象的方法 :
				alert("提示文本")					 警告框
				prompt("提示文本"[,value]) 带有输入框的弹框,value
							表示初始化输入框的值,返回字符串结果
				confirm("提示文本")					确认框
							返回true/false,只有点击"确定"返回true,
							其他情况(点击取消,强制关闭)都返回false


/*------------------------------*/
 2. DOM
		DOM 文档对象模型,提供操作文档对象的属性和方法
		DOM的核心对象 document (文档对象)
		document是window的属性
			et :
				document.write();
				window.document.write();
	
	
			
			
				

	   
			


			





					


						






						

						
				
				
					
				















					

