1.插入
  1.创建实体对象
    user = Users(xxx)
  2.插入数据
    db.session.add(user)
    db.session.commit()

  通过配置,执行完视图之后自动提交
    app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']=True
2.查询
  1.基于 db.session
    1.db.session.query()
      db.session.query(Users) : 查询users表中所有的列
      db.session.query(Users.id,Users.age) : 查询users表中id和age两个字段的值

      返回:查询对象
    2.查询执行函数
      目的:基于查询对象后得到最终的结果
        1.all()
          以列表的方式封装所有查询出来的实体对象数据
        2.first()
          返回查询结果中的第一个数据,如果没有查询出结果,则返回None
        3.first_or_404()
          返回查询结果中的第一个数据,如果没有的话则返回404
        4.count()
          返回查询结果的记录数
    3.查询过滤器函数
      目的:在查询对象后对数据进行筛选
      语法:db.session.query(xxx).过滤器函数().执行函数()
      1.filter()
        指定条件进行过滤 - where
        1.db.session.query(Users).filter(Users.id==1).first()
          select * from users where users.id=1
        2.db.session.query(Users).filter(Users.id>1,Users.age<50)
          select * from users where users.id>1 and users.age < 50
        3.
          from sqlalchemy import or_
          db.session.query(Users).filter(or_(Users.id>1,Users.age<50)
          select * from users where users.id>1 or users.age<50
        4.db.session.query(Users).filter(Users.email.like('wang%'))
          select * from users where users.email like 'wang%'
        5.db.session.query(Users).filter(Users.id.in_([1,3,5]))
          select * from users where users.id in [1,3,5]
        6.db.session.query(Users).filter(Users.age.between(30,50))
          select * from users where users.age between 30 and 50
      2.filter_by()
        特点:只做等值判断
        db.session.query(Users).filter_by(id=1)
        select * from users where id=1
      3.limit() / offset()
        offset() : 指定偏移量
        limit() : 获取限定数量的行数据

        db.session.query(Users).limit(5).offset(2)
        select * from users limit 2,5
      4.order_by()
        db.session.query(Users).order_by("age desc,id asc")
      5.group_by()
        作用:分组

        谨慎使用:
        db.session.query(Users).group_by("age")
        select * from users group by age

        推荐使用:
        db.session.query(Users.age).group_by("age")
        select users.age from users group by age
      6.聚合函数
        语法: 
          from sqlalchemy import func
          func.聚合函数(列名)

          聚合函数:
            avg(),sum(),max(),min(),count()
        用法:
          db.session.query(func.avg(Users.age)).first()
          db.session.query(func.avg(Users.age)).group_by('age').all()


        filter() / filter_by()  : where 子句
        group_by() : group by 子句
        order_by() : order by 子句  
        limit(n) / offset(m) : limit m,n
  2.基于 Models 
    单表,所有列的查询推荐使用Models
    Models.query.all()
    Models.query.filter().all()
    Models.query.filter_by().all()
===================================================
1.ORM操作
  1.插入(略)
  2.查询(略)
  3.修改
    ex:将users表中id为1的人的年龄更改为60岁
    1.查
      user = Users.query.filter_by(id=1).first()
    2.改
      user.age = 60
    3.保存
      db.session.add(user)
      db.session.commit()
  4.删除
    1.查
    2.删除 
      db.session.delete(实体对象)
2.关系映射
  1.一对多关系映射
    一对多在数据库中的实现方式:主外键关系
      在 "多" 表中增加一个列,作为外键,引用在"一"表的主键
    语法:
      1.在 "多" 实体类中
        增加一个属性,引用自"一"表(实体类)的主键列(属性)
        外键列名 = db.Column(db.Integer,db.ForeignKey('主表.主键'))
      2.在 "一" 实体类中
        增加关联属性以及反向引用关系
        关联属性:
          在 course 对象中,通过一个属性能够得到对应的所有的teacher们
          关联属性,是应该加在Course的实体类中
        反向引用:
          在 teacher 对象中,通过一个属性能够得到对应的course
          反向引用属性,是应该加在 Teacher 的实体类中

        增加关联属性和反向引用关系:
          在"一"的实体类中增加:
          属性名=db.relationship('多表实体类名',关系选项)
          关系选项:
          选项名            说明
          backref          在关系的另一个模型中添加的反向引用属性名
            (准备在"多"的实体中增加对"一"的实体引用的属性名)
          lazy             指定如何加载当前的相关记录(延迟加载模式)
                           select:首次访问时加载所有记录
                           immediate:源对象只要加载就马上加载相关记录
                           subquery:效果同上,使用子查询的方式加载记录
                           noload:永不加载相关记录
                           dynamic:默认也不加载相关记录,但提供记录的查询
          uselist         如果设置为False,表示不使用列表表示相关数据而使用标量
          secondary       指定多对多关系中关联表的名字
  2.一对一
    1.在SQLAlchemy中的体现
      1.在任意一个实体类中 增加 对另外一个实体的引用
        外键列名=db.Column(db.Integer,db.ForeignKey('主键表.主键列'),unique=True)
      2.在另一个实体中要增加关联属性和反向引用关系
        属性=db.relationship('关联的实体类',backref="反向引用属性名",uselist=False)
          uselist:表示 属性 不是一个列表 而是一个 标量




一门 course 可以被多名 teacher 教
一名 teacher 只能教授 一门 course

Course : 一
Teacher : 多

  