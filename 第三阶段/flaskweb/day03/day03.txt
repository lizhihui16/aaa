1.模板
	1.变量
		允许作为变量的数据类型
			数字(整数,小数),字符串,元组,字典,列表,对象
	2.过滤器
		{{变量|过滤器}}

		过滤器:
			capitalize : 首字符变大写
			lower : 小写
			upper : 大写
			title : 每个单词首字符变大写
			trim : 去掉文本两端的空格
	3.标签
		1.if 标签
			1.基本if结构
				{% if 条件 %}
					满足if条件要执行的内容(静态/动态)
				{% endif %}
			2.if ... else ...
				{% if 条件 %}
					xxxx
				{% else %}
					xxxx
				{% endif %}
			3. if ... elif ... else
				{% if 条件 %}
					xxxx
				{% elif 条件 %}
					xxxx
				{% else %}
					xxxx
				{% endif %}
		2.for 标签
			语法:
				{% for 变量 in 元组|列表|字典 %}
				{% endfor %}
			内置变量: loop
				1.index : 循环次数 , 从1开始
				2.index0: 循环下标 , 从0开始
				3.first : 是否为第一次循环,True,第一次,False,非第一次
				4.last  : 是否为最后一次循环,True,最后一次
		3.macro 标签 - 宏
			相当于是模板中的 函数
			1.声明宏
				{% macro 名称(参数) %}
					xxxx
				{% endmacro %}
			2.使用宏
				{{宏明(参数)}}
			3.在外部独立的文件声明宏
				1.创建 macro.html 
					{% macro xxxx1()%}
					{% endmacro %}

					{% macro xxxx2()%}
					{% endmacro %}
				2.使用时,导入宏文件
					{% import 'macro.html' as macros %}
	4.静态文件
		1.什么是静态文件
			不能与服务器做动态交互的文件
			如:css,js,图片,音视频,... ...
		2.静态文件的处理
			1.所有的静态文件必须保存在 static 目录中
				static 目录必须存放在 项目的 根目录处
			2.访问静态文件
				通过 /static/xxx 访问静态文件
====================================================
1.模板
	1.模板的继承
		1.什么是模板的继承
			模板的继承类似于类的继承
			如果一个模板中所出现的大量内容与另一个模板相同的话
			那么就可以使用继承的方式来简化模板的开发
		2.语法
			1.父模板中
				需要在父模板中定义出哪些内容在子模板中是可以被重写的
				{% block 块名 %}
				{% endblock %}

				block : 定义允许在子模板中被修改的内容
					1.在父模板中正常显示,没有任何影响
					2.在子模板中可以被重写
			2.子模板中
				1.使用 {% extends '父模板名称' %} 来表示继承
				2.使用 {% block 块名%} 来重写父模板中同名块的内容
					{% block 块名 %}
						会覆盖掉父模板中同名block的内容
					{% endblock%}
2.自定义错误页面
	404 : Not Found
	500 : Internal Server Error

	1.404 的错误处理
		@app.errorhandler(404)
		def page_not_fount(e):
			return render_template('404.html'),404
	2.500 的错误处理
		@app.errorhandler(500)
		def internal_server_error(500):
			return render_template('500.html'),500
	404.html 和 500.html 需要自定义
3.修改配置
	app = Flask(__name__,
		template_folder='muban',
		static_folder="sta",
		static_url_path="/s")
	1.template_folder
		指定保存模板的文件夹名称
	2.static_folder
		指定保存静态文件的文件夹名称
	3.static_url_path	
		指定访问静态文件的路径


		http://localhost:5000/static/imgage/a.jpg
		http://localhost:5000/s/imgage/a.jpg
4.请求(request) 和 响应(response)
	1.http 协议
		Request : 请求消息
			请求起始行
				请求方式
				请求路径
				协议以及版本号
			请求消息头
				key:value
				Referer : http://www.tmooc.cn
					Referer请求消息头:用于记录请求源地址
			请求主体
				由客户端浏览器带给服务器的数据或信息
				只有 post 和 put 请求 才有请求主体
		Response : 响应消息
			响应起始行
				协议和版本号
				响应状态码
				原因短句
			响应消息头
				key:value
				Content-Type : image/png
					Content-Type消息头:告诉浏览器响应回来的内容是什么类型的
			响应主体
				Response / Preview
	2.请求对象 - request
		1.什么是请求对象
			request - 请求对象,封装了所有与请求相关的信息
			在Flask中可以通过 request 对象来获取请求信息
			from flask import request
		2.request中的常用成员
			1.scheme:获取请求方案(协议)
			2.method:获取请求方式(重点,取值为 post 或 get)
			3.args : 获取使用get请求方式提交过来的数据(重点)
			4.form : 获取使用post请求方式提交过来的数据(重点)
			5.cookies : 获取cookies中的相关信息
			6.headers : 获取请求消息头的相关信息
			7.files : 获取上传的文件
			8.path : 获取请求的资源的具体路径(不带参数)
			9.full_path : 获取完整的请求资源的具体路径(带参数)
			10.url : 获取完整的请求地址,从协议开始
		3.获取使用get请求方式提交过来的数据
			1.get 请求方式
				1.表单允许实现get请求
					<form action="" method="get">
						姓名: <input type="text" name="uname">
						<input type="submit">
					</form>
				2.请求地址后拼查询字符串(提交的参数)
					<a href="/05-get?uname=rapwang&upwd=tarenawc"></a>
			2.post 请求方式
				只有在表单提交时才可以触发post请求
				request.form 获取post提交的数据
			练习:
				1.访问地址 /06-form 
					1.如果是 get 请求,则去往 06-form.html
						包含一个表单 post 提交方式,提交地址 /06-form
						1.用户名称 - 文本框
						2.用户密码 - 密码框
						3.电子邮箱 - 文本框
						4.真实姓名 - 文本框
						5.提交按钮
					2.如果是post请求
						则接受请求提交的数据,并输出在 终端上

	3.响应对象 - response


http://abc?name=wangwc&age=35

['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', 
'__exit__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__',
 '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', 
 '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__',
  '__weakref__', '_cached_json', '_get_data_for_json', '_get_file_stream', 
  '_get_stream_for_parsing', '_load_form_data', '_parse_content_type', 'accept_charsets', 
  'accept_encodings', 'accept_languages', 'accept_mimetypes', 'access_route', 
  'application', 'args', 'authorization', 'base_url', 'blueprint', 'cache_control', 
  'charset', 'close', 'content_encoding', 'content_length', 'content_md5', 'content_type', 
  'cookies', 'data', 'date', 'dict_storage_class', 'disable_data_descriptor', 
  'encoding_errors', 'endpoint', 'environ', 'files', 'form', 'form_data_parser_class', 
  'from_values', 'full_path', 'get_data', 'get_json', 'headers', 'host', 'host_url', 
  'if_match', 'if_modified_since', 'if_none_match', 'if_range', 'if_unmodified_since', 
  'input_stream', 'is_json', 'is_multiprocess', 'is_multithread', 'is_run_once', 
  'is_secure', 'is_xhr', 'json', 'list_storage_class', 'make_form_data_parser', 
  'max_content_length', 'max_form_memory_size', 'max_forwards', 'method', 'mimetype',
   'mimetype_params', 'on_json_loading_failed', 'parameter_storage_class', 'path',
    'pragma', 'query_string', 'range', 'referrer', 'remote_addr', 'remote_user', 
	'routing_exception', 'scheme', 'script_root', 'shallow', 'stream', 'trusted_hosts', 
	'url', 'url_charset', 'url_root', 'url_rule', 'user_agent', 'values', 'view_args', 
	'want_form_data_parsed']
