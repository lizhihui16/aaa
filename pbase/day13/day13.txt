day12回顾：
  装饰器
    def 装饰器函数名（被装饰函数形参）：
        创建闭包



自定义模块
  要求：
    模块文件名后缀必须为.py结尾
    模块文件名必须是合法的标识符
    避免名称和内建模块名冲突
  导入方式：
    import 自定义模块名
    from 自定义模块名 import 属性
    from 自定义模块名 import *
  示例：
  mymod.py
  test_mymod.py

import 语句搜索模块的路径顺序
  1. 搜索内置模块
  2. 搜索程序运行时的路径(当前路径) 
  3. sys.path 提供的路径
    可以在sys.path里添加自定义的路径
    如：
     import sys
     sys.path.append("/home/tarena)
     import mymod
     #可以导入导入/home/tarena/mymod.py这个模块
    
模块化编程的优点：
  1.有利于多人合作开发
  2.使代码更加易于维护
  3.提供代码的复用率
  4.模块化编程有利于解决函数名和变量名冲突（模块内的变量的作用域为模块内为全局）
模块的加载过程：
  在模块导入时，模块的索引语句会执行
  如果有一个模块已经导入，则再次导入时不会重新执行模块内的语句
模块的重新加载
  import mymod
  import imp
  imp.reload(mymod)  # 在运行时重新加载mymod 模块
模块被导入和执行的过程
  1.搜索相关的路径找模块文件.py
  2.判断是否有此模块对应的.pyc文件，如果pyc文件比.py文件新，则直
  接加载.pyc文件，否则用.py文件重新生成.pyc文件并加载
pyc 模块的编译
           编译               执行
  mymod.py---->mymod.pyc--->python3
模块的预置属性
  __doc__属性绑定模块的文档字符串
  模块的文档字符串是模块内第一个没有赋值给任何变量的字符串
  
  __file__属性
    __file__用来绑定模块所对应的文件路径名
  __name__属性
   作用：
    1.记录模块名
    2.用来判断是否为主模块
   说明：
    1.当此模块为主模块运行时，__name__绑定'__main__'
    2.当此模块不是主模块运行，而是被其他模块导入时，此模块名为模块文件.py前面的模块名
      如：mymod.py 的模块名为mymod
    注：
      主模块是指最先被python解释执行器在的模块
模块的__all__列表
  __all__列表是一个用来存储可导入属性的字符串列表
  作用：
    限制用from xxx import *语句导入时导入部分属性，而不是全部属性
  示例：
  mymod2.py 
模块的隐藏属性：
  模块中以‘-'开头的属性，在from xxx import *导入时将不被导入，通常称这些属性为隐藏属性
  示例：
  mymod3.py
随机模块 random
  作用：
    用于模拟或生成随机输出的模块
  文档参见：
练习：
  猜数字游戏：
    随机生成一个0-100之间的整数，用变量x绑定，让用户输入一个数y，输出猜数字的结果
    1）如果y等于生成的数x，则提示“恭喜您猜对了”，并退出程序
    2）如果y大于x，则提示’您猜大了‘，然后继续猜下一次
    3）如果y小于x，则提示’您猜小了‘
    直到猜对为止，最后显示用户猜数字的次数后退出程序
      import random
      x=random.randrange(101)
      # print(x)
      i=0
      while True:
          
          n=int(input('数字'))
          i+=1
          if n>x:
              print("您猜大了")
          elif n<x:
              print('您猜小了')
          elif n==x:
              print('猜对了')
              break
      print('您共猜了%d次' % i)
包（模块包）  package
  包是将模块以文件夹的组织形式进行分组管理的方法
  作用：
    将一系列模块进行分类管理，有利于防止名字冲突
    可以在需要时加载一个或部分模块而不是全部模块
  示例：
      mypack/
        __init__.py
        menu.py
        games/
            __init__.py
            contra.py
            supermario.py
            tanks.py
        office/
            __init__.py
            excel.py
            word.py
            powerpoint.py

包的导入：
  同模块的导入规则局部相同
  语法：
    import 包名 [as 包别名]
    import 包名.模块名 [as 模块新名]
    import 包名.子包名.模块名 [as 模块新名]

    from 包名 import 模块名 [as 模块新名]
    from 包名.子包名 import 模块名 [as 模块新名]
    from 包名.子包名.模块名 import 属性名[as 属性新名]

    from 包名 import *
    from 包名.模块名 import *
    ...

__init__.py 文件
  此文件是常规包内必须存在的文件，此文件会在包被导入是自动调用
  作用：
    编写此包的内容
    在内部填写包的文档字符串
    在__init__.py内可以加载此包所依赖的一些其他模块
  示例：
    mypack/__init__.py
包内的__all__列表
  作用：
    用来记录此包中有那些子包或模块在from import *语句导入时需要被导入
  说明：
    __all__列表只针对from xxx import *语句中起作用
  示例见：
  mypack/games/__init__.py

包的相对导入
  包的相对导入是指包内模块的相互导入
  语法：
    from 相对路径包或模块 import 属性或模块名
    或
    from 相对路径包或模块 import *
  相对路径：
    .代表当前目录
    ..代表上一级目录
    ...代表上二级目录
    ....依次类推
    注：相对导入时不能超出包的外部
  示例见：
    mypack/games/contra.py
注意避免相互导入：
  见：
    mypack2/
      __init__.py
      a.py
      b.py
包的加载路径：
  1.当前工作路径
  2.sys.path提供的路径
    模块的加载路径设置方法
      sys.path("新路径")
练习
  1. 模拟'斗地主'发牌 
    牌共54张
    花色:
       黑桃('\u2660'), 梅花('\u2663'), 方块('\u2666'), 红桃('\u2665')
    大小王
    数字:
       A0~10JQK
    1) 生成54张片
    2) 三个人玩牌，每人发17张,底牌留三张
      输入回车, 打印第1个人的17张牌
      输入回车, 打印第2个人的17张牌
      输入回车, 打印第3个人的17张牌
      输入回车, 打印3张底牌
  2. 将学生信息管理程序拆分成相应的模块:
      建议:
        main.py  # 放主事件循环 main函数及其关相函数
        menu.py  # 放菜单相关的函数
        student_info.py  # 放学生信息操作相关的函数

