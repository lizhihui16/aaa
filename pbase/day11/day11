函数式编程
    函数式编程是指一系列函数解决问题
  说明：
    用每一个函数完成细小的功能，一系列函数的任何组成可以解决大问题
    函数仅接受输入并产生输出，不包含任何可能影响输出的内部状态
函数的可重入性：
　　当一个函数没有访问除局部变量以外的变量，则此函数为可重入函数
  示例：
　　 ＃可重入函数
    def myadd1(x,y):
        return x+y
    #不可重入函数
    s=0
    def myadd2(x,y):
        global s
        s+=x+y
        return s
高阶函数　High Order Funcyion
　什么是高阶函数
    满足下列条件中一个的函数即为高阶函数
    　　函数接受一个或多个函数作为参数变量
    　　函数返回一个函数
python　内建的高阶函数
　map,filter,sorted
map 函数
  map(func,*iterables) 返回可迭代对象，此可迭代对象用func对迭代对象terables中
  的每个元素作为参数计算后得到结果，再返回，当最短的一个可迭代对象不再提供数据时迭代结束
  示例：
    # def power2(x):
    #     return x**2
    # #生成一个可迭代对象，此可迭代对象可以生成１－９的自然数的平方
    # for x in map(power2,range(1,10)):
    #     print(x)

    #生成一个可迭代对象，此可迭代对象可以生成
    # １**4,2**3,3**2,4**1
    #pow(x,y,z=None)
    # for x in map(pow,range(1,5),range(4,0,-1)):
    #     print(x)

    # for x in map(pow,range(1,5),range(4,0,-1),range(5,100)):
    #     print(x)

练习：
    求：1**2+2**2+3**2+...+9**2的和
    求：１**3＋２**3+3**3+...+9**3的和
    求：１**9+2**8+3**7+...+9**1的和
    def mx(x,y):

filter 函数
    filter(func,iterable)返回一个可迭代对象，此可迭代对象将对iterable获
    取到的数据用函数func进行筛选；func将对iterable中的每个元素进行求值，
    返回Ｆａｌｓｅ则丢弃，返回Ｔｒｕｅ则保留此数据
　　示例
    def isodd(x):
        return x%2==1
    for x in filter(isodd,range(100)):
        print(x)
    练习：
    　把１－１００之间的全部素放在列表ｐｒｉｍｅs中
        def isprime(x):
            if x<2:
                return False
            for i in range(2,x):
                if x%i==0:
                    return False
            return True
        primes=[x for x in filter(isprime,range(1,100))]
        print(primes)
sorted 函数：　
　　作用：
    将原可迭代对象的数据进行排序，生成排序后的列表
　　格式：
    sorted(iterble,key=None,reverse=False)
    说明：
    iterable是可迭代对象
    key 函数是用来提供比较值的函数，这个值将作用排序的依据
    reverse标志用来设置是否降序排序
    示例：
        L=[5,-2,-4,0,3,1]
        L2=sorted(L)
        print('L2=',L2)     #[-4,-2,0,1,3,5]
        l3=sorted(L,reverse=True)
        print("l3=",l3)    #[5,3,1,0,-2,-4]

        l4=sorted(L,key=abs)
        print(l4)      #[0,1,-2,3,-4,5]
        names=['Tom','Jerry','Spike','Tyke']
        l5=sorted(names,key=len)
        print(l5)
        l6=sorted(names)
        print('l6=',l6)
  练习：
    names=['Tom','Jerry','Spike','Tyke']
    排序的依据是'moT','yrreJ','ekipS','ekyT'
    结果是：
        ['Spike','Tyke','Tom','Jerry']
        (注：如果没有现成的函数可用，需要之间写函数)
        l=['Tom','Jerry','Spike','Tyke']
        def mm(s):
            return s[::-1]
        l1=sorted(l,key=mm)
        print(l1)
递归函数(recursion)
    函数直接或间接的调用自身
　示例：
    def f1():
        f1()   #直接调用自己
    f1()
    ＃#######
    def fa():
        fb()
    def fb():
        fa()
    fa()
 说明：
    递归一定要控制递归的层数，当符合一定的条件时要终止递归调用
    几乎所有的递归都能用while循环来代替
  优缺点：
    优点是可以把问题简单化，让思路更清晰，代码更简洁
    缺点是因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
递归函数调用分为两个阶段
  1.递推阶段 
    从原问题出发，按递归公式递推从未知到已知，最终到达递归终止条件
  2.回归阶段
    按递归终止条件求出结果，逆向逐步代入递归公式，回归原问题求解
 示例：
    def fx(n):
        print('递归进入第',n,'层')
        if n==3:
            return
        fx(n+1)
        print('递归退出第',n,'层')
    fx(1)
    print('程序结束')
练习：
    用递归的方式求1+2+3+....+n的和
    def mysum(n):
        ...
    print(mysum(100))

    def mysum(n):
        if n==1:
            return 1
        return n+mysum(n-1)
    print(mysum(100))
思考题：
    已知有五位朋友在一起，第五位朋友说他比第四位朋友大2岁
    第四位朋友说他比第三位朋友大2岁
    第三位朋友说他比第二位朋友大2岁
    第二位朋友说他比第一位朋友大2岁
    第一位朋友说他10岁
    求第n人的年龄
闭包　closure
    什么是闭包
        闭包是引用了此函数外部变量的函数
    闭包必须满足三个条件：
        １．必须有内嵌函数
        ２．内建函数必须引用外部函数中的变量
        ３．外部函数返回值必须是内嵌函数
    示例见：
    1. #定义很多函数每个函数求x**y次方，y是可变的
        # def pow2(x):
        #     return x**2
        # def pow3(x):
        #     return x**3
        # def pow4(x):
        #     return x**4
        # .....
        # def pow99(x):
        #     return x**99
        #经闭包实现
        def make_power(y):
            def fn (x):
                return x**y
            return fn
        pow2=make_power(2)
        print('5的平方是：',pow2(5))
练习：
  1.编写程序求1-20的阶乘和
  即：
  1！+2！+3！+...+20!
  2.改写之前的学生信息管理系统，要求添加四个功能：
    5）按学生成绩高-低显示学生信息
    6）按学生成绩低-高显示学生信息
    7）按学生年龄高-低显示学生信息
    8）按学生年龄低-高显示学生信息
  3.已知有列表：
  L=[[3,5,8],10,[[13,14],15,18],20]
    1)写个函数print_list(lst) 打印出所有的数字，即：
      print_list(L)   #打印3 5 8 13...
    2)写一个函数sum_list(lst)返回这个列表中所有数字的和
      print(sum_list(l))  #106
    注：type(x)可以返回一个变量的类型，如：
    >>>type(20) is int  #True
    >>>type([1,2,3]) is list    #True















































