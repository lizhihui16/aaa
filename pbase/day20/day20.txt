对象属性管理函数:
  getattr(obj,name[,default])
  hasattr(obj, name)
  setattr(obj, name, value)
  delattr(obj, name)
示例：
    class Dog:
        pass
    d=Dog()
    d.color='白色'
    c=getattr(d.'color')  # d.color
    hasattr(d,'color')  #True
    setattr(d,'kinds','导盲犬')
    delattr(d,'kinds')
异常（高级)
  异常相关的语句:
    try-except 
    try-finally
    raise 触发异常，发生错误通知
    assert 根据条件触发AssertionError类型的错误通知
    with 语句
with 语句
  语法:
    with 表达式1 [as 变量1],表达式2 [as 变量2], ...:
       语句块 
  作用:
    使用对资源进行访问的场合，确保使用过程中不管是否发生异常，都会执行必须的'清理'操作，并释放资源
      如: 文件使用后自动关闭，线程中锁的自动获取和释放等
  说明:
    执行表达式 用as 子句中的变量绑定生成的对象
    with 语句并不会改变异常的状态（同try-finally类似）
  示例见:
    with.py

环境管理器(也有叫上下文管理器)
  1. 类内有__enter__方法 和 __exit__ 实例方法的类创建的实例被称为环境管理器
  2. 能够用with语句进行管理的对象必须是环境管理器
  3. __enter__方法将在进入with语句时被调用，并返回由 as 变量管理的对象
  4. __exit__ 方法将在离开with语句时被调用, 且可以用参数来判断在离开with语句时是否有异常发生并做出相应的处理

示例见:
  context.py

运算符重载  overload
  什么是运算符重载：
    让自定义的类生成的对象（实例)能够使用运算符进行操作
  作用:
    让自定义类的实例像内建对象一样进行运算符操作
    让程序简洁易读
    对自定义的对象将运算符赋予新的运算规则
  说明:
    运算符重载方法的参数已经有固定的含义，不建议改变原有的意义
算术运算重载
  方法名                  运算符和表达式    说明 
  __add__(self, rhs)      self +  rhs     加法
  __sub__(self, rhs)      self -  rhs     减法
  __mul__(self, rhs)      self *  rhs     乘法
  __truediv__(self, rhs)  self /  rhs     除法
  __floordiv__(self, rhs) self // rhs     地板法
  __mod__(self, rhs)      self %  rhs     求余(取模)
  __pow__(self, rhs)      self ** rhs     冪运算

  rhs (right hands side) 右手边

示例见:
  mynumber.py
练习：
  实现两个自定义的列表相加操作
  class MyList:
    ...
  L1=myList(range(1,4))
  L2=MyList([4,5,6])
  L3=L1+L2
  print(L3)   #MyList([1,2,3,4,5,6])
  L4=L2+L1
  print(L4)   #MyList([4,5,6,1,2,3])
　L5=L1*3
　print(L5)

反向算术运算符的重载
  当运算符的左侧为内建类型时,右侧为自定义类型进行算术运算时,会出现TypeError错误,
  因无法修改内建类型的代码来实现运算符重载,此时需要使用反向算术运算符重载来完成重载

反向算术运算重载
  方法名                  运算符和表达式    说明 
  __radd__(self, lhs)      lhs +  self     加法
  __rsub__(self, lhs)      lhs -  self     减法
  __rmul__(self, lhs)      lhs *  self     乘法
  __rtruediv__(self, lhs)  lhs /  self     除法
  __rfloordiv__(self, lhs) lhs // self     地板法
  __rmod__(self, lhs)      lhs %  self     求余(取模)
  __rpow__(self, lhs)      lhs ** self     冪运算
    lhs (left hand side) 左手边

复合赋值算术运算符重载
  以复合赋值算术运算符 x += y 为例, 此运算符会优先调用 x.__iadd__(y) 方法,如果没
  有__iadd__方法时会将复合赋值运算符拆为 x = x + y, 然后调用 x = x.__add__(y) 
  方法, 如果再不存在__add__方法则会触发TypeError异常

  其它复合赋值算术运算符也具有相同的规则

复合赋值算术运算重载
  方法名                  运算符和表达式    说明 
  __iadd__(self, rhs)      self +=  rhs     加法
  __isub__(self, rhs)      self -=  rhs     减法
  __imul__(self, rhs)      self *=  rhs     乘法
  __itruediv__(self, rhs)  self /=  rhs     除法
  __ifloordiv__(self, rhs) self //= rhs     地板法
  __imod__(self, rhs)      self %=  rhs     求余(取模)
  __ipow__(self, rhs)      self **= rhs     冪运算
    rhs (right hands side) 右手边

比较运算符的重载
  方法名                  运算符和表达式    说明 
  __lt__(self, rhs)      self <  rhs     小于
  __le__(self, rhs)      self <= rhs     小于等于
  __gt__(self, rhs)      self >  rhs     大于
  __ge__(self, rhs)      self >= rhs     大于等于
  __eq__(self, rhs)      self == rhs     等于
  __ne__(self, rhs)      self != rhs     不等于

注: 比较运算符通常返回布尔值True 或False

位运算符的重载
  方法名                  运算符和表达式    说明 
  __invert__(self, rhs)    ~self    取反(一元运算符)
  __and__(self, rhs)       self &  rhs     位与
  __or__(self, rhs)        self |  rhs     位或
  __xor__(self, rhs)       self ^  rhs     位异或
  __lshift__(self, rhs)    self << rhs     左移
  __rshift__(self, rhs)    self >> rhs     右移

反向位运算符的重载
  方法名                  运算符和表达式    说明 
  __rand__(self, lhs)       lhs &  self     位与
  __ror__(self, lhs)        lhs |  self     位或
  __rxor__(self, lhs)       lhs ^  self     位异或
  __rlshift__(self, lhs)    lhs << self     左移
  __rrshift__(self, lhs)    lhs >> self     右移

复合赋值位运算符的重载
  方法名                  运算符和表达式    说明 
  __iand__(self, rhs)    self &=  rhs     位与
  __ior__(self, rhs)     self |=  rhs     位或
  __ixor__(self, rhs)    self ^=  rhs     位异或
  __ilshift__(self, rhs) self <<= rhs     左移
  __irshift__(self, rhs) self >>= rhs     右移

一元运算符的重载
    方法名　　　　　　　　　　运算符和表达式　　　说明
  __neg__(self)              - self       负号
  __pos__(self)              + self       正号
  __invert__(self)           ~ self       取反

　　语法格式:
    class 类名
        def __xxx__(self):
          ...

  示例见:
    mylist5.py

in / not in 运算符重载
  方法格式
    def__contains__(self, e)
      ....
    e in self 
示例见：
    mylist6.py

索引和切片运算符的重载
  重载方法               运算符和表达式　　说明
__getitem__(self, i)    x = self[i]  索引/切片取值
__setitem__(self,i,val) self.[i]=val 索引/切片赋值
__delitem__(self, i)    del self[i]  del语句索引/切片

作用:
  让自定义的类型的对象能够支持索引和切片操作
示例见:
  mylist7.py

slice 构造函数       mylist9.py
  作用:
    用于创建一个slice切片对象, 此对象存储一个切片起始值,终止值, 步长值信息
  格式:
    slice(start=None, stop=None, step=None) 创建 一个slice 切片对象
  slice 对象属性
    s.start 切片的起始值   默认为None
    s.stop 切片的终止值   默认为None
    s.step 要片的步长    默认为None

特性属性 @property
    实现其它语言所拥有的 getter 和 setter功能
  作用:
    用来模拟一个属性
    通过@property装饰器可以对模拟的属性赋值和取值加以控制
  示例：
    property.py
练习
  实现有序集合类 OrderSet 能实现两个集合的
    交集 &   全集 |  补集 -  对称补集 ^  == / != 
    in / not in 等集合操作
  要求内部用list 存储
  class OrderSet:
       ...
  s1 = OrderSet([1, 2, 3, 4])
  s2 = OrderSet([3, 4, 5])
  print(s1 & s2)  # OrderSet([3, 4])
  print(s1 | s2)  # OrderSet([1, 2, 3, 4, 5])
  print(s1 ^ s2)  # OrderSet([1, 2, 5])
  if OrderSet([1,2,3]) != s1:
      print("不相等")
  if 2 in s1:
      print('2 在s1内')
  else:print('2 不在s1内)





























