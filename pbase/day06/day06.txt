列表
  向列表内添加数据
    L=[0:0]=[300,200]
  修改数据:
    L[1]=300
    L[1:5]=[1,2,3]
  删除数据:
    L[1:5]=[]
dei语句:
  用于删除列表的元素
  示例:
    del L[2]  #删除单个元素
    del L[::2]  #删除切片切出来的部分
练习:
  已知有列表:
    L=[3,5]
    用索引的切片等操作,将原列表改变为:
    L=[1,2,3,4,5,6]
    将列表反转(先后顺序颠倒),删除最后一个元素,打印此列表:
    print(L)   # [6,5,4,3,2]
Python3中常用于的函数
  len(x)    返回序列长度
  max(x)    返回序列的最大值元素
  min(x)    返回序列的最小值元素
  sum(x)    返回序列中所有元素的和(元素必须是数值类型)
  any(x)    真值测试  如果序列其中一个值为真值则返回True
  all(x)    真值测试  如果序列中所有值为真值则返回True
  示例:
    L=['one',2,'三']
    print(len(L))   #3
    L=[8,3,6,2]
    min(L)   #2
    all([None,1,0.02,[]],'heelo')  #  False
    all([None,1,0.02,[]],'heelo','')  #  False
    all([None,1,0.02,[]],'heelo')  #  False
    all([None,1,0.02,[]],'heelo')  #  False
练习
  1.输入三个数,存于列表中,打印这三个数的最大值,最小值和平均值
  2.写程序,让用户循环输入一些整数,当输入-1时结束输入,将这些整数存于列表L中
  1)打印您 共输入了几个有效数
  2)打印你输入的数的最大值
  3)打印你输入的数的平均值
python3中常用的列表方法(method)
    文档参考:list.html
    方法 	意义
L.index(v[,begin[,end]]) 	返回对应元素的索引下标, begin为开始索引，
                            end为结束索引,当 value 不存在时触发
                            ValueError错误
L.insert(index, obj) 	将某个元素插放到列表中指定的位置
L.count(x) 	返回列表中元素的个数
L.remove(x) 	从列表中删除第一次出现在列表中的值
L.copy() 	复制此列表（只复制一层，不会复制深层对象)
L.append(x) 	向列表中追加单个元素
L.extend(lst) 	向列表追加另一个列表
L.clear() 	清空列表,等同于 L[:] = []
L.sort(reverse=False) 	将列表中的元素进行排序，默认顺序按值的小
                        到大的顺序排列
L.reverse() 	列表的反转，用来改变原列表的先后顺序
L.pop([index]) 	删除索引对应的元素，如果不加索引，默认删除最后元素，
                同时返回删除元素的引用关系
深拷贝和浅拷贝
  浅拷贝 shallow copy
    浅拷贝是指在对象复制过程中,只复制一层变量,不会复制深层变量绑定的对
    象的复制过程
  如:
  L=[3.1,3.2]
  L1=[1,2,L]
  L2=L1.copy()   # 浅拷贝
  print(L1)    #[1,2,[3.1,3.2]]
  print(L2)    #[1,2,[3.1,3.2]]
  L[0]=3.14      #L2[2][0]=3.14
  print(L1)    #[1,2,[3.14,3.2]]
  print(L2)    #[1,2,[3.14,3.2]]
  print(L)     #[3.14,3.2]
深拷贝 deep copy:
  import copy:  #导入复制模块
  L=[3.1,3.2]
  L1=[1,2,L]
  L2=copy.deepcopy(L1)   # 深拷贝
  print(L1)    #[1,2,[3.1,3.2]]
  print(L2)    #[1,2,[3.1,3.2]]
  L2[2][0]=3.14
  print(L1)    #[1,2,[3.1,3.2]]
  print(L2)    #[1,2,[3.14,3.2]]
  print(L)     #[3.1,3.2]
列表与字符串比较
  1.都是序列,元素之间有先后顺序关系
  2.字符串是不可变的序列,列表是可变得序列
  3.字符串中每个元素只能存储字符(编码),而列表可以存储任意类型的元素
  4.列表和字符串都是可迭对象
字符串文本解析方法split和join
  S.split(Sep=None)将字符串使用Sep作用分隔符分隔s字符串,返回分隔后
  的字符串列表,当不给定参数时,用空白字符作用分隔符分隔

  S.join(iterable)用可迭对象的字符口中,返回一个中间用S进行分隔的字符串
  示例:
    s="Beijing is capital"
    L=s.split('') # L=['Beijing','is','capital']
    L=['aaa','bbb','ccc']
    s2='#'.join(L)  #s2="aaa#bbb#ccc"
  练习:
    有字符串s="hello",请生成如下字符串:'h e l l o'和'h-e-l-l-o'
列表推导式list comprehension
  列表推导式是用可迭代对象创建列表的表达式
  作用:
    用简易方法生成列表
  语法:
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
  示例:
    #一下生成一个数值为1-9的平方的列表
    L=[]
    for x in range(1,10)
        L.append(x**2)
    或
    L=[x**2 for x in range(1,10)]
  练习:
  用列表推导式生成1-100内所有奇数的平方的列表
  [1,9,25,.....]
  以下生成一个数值为1-9的平方的列表(只保留偶数)
    L=[x**2 for x in range(1,10) if x%2==0]
练习:
  写程序,输入一个开始的整数值用begin绑定,输入一个结束的整数用end绑定
  将从begin开始大end结束的所有偶数存与列表中,并打印
  2.写程序,让用户输入很多整数(包含正整数和负整数)保存于列表L中,输入0结
  束输入,然后把列表L中的所有正数存于列表L1中,把列表L中的所有负数存于列
  表L2中,打印原列表L和正数列表L1和负数列表L2
列表推导式的嵌套:
  [表达式1
   for 变量1 in 可迭代对象1 if 真值表达式1
      for 变量2 in 可迭代对象2 if 真值表达式2
          ...]
  示例:
  将列表[10,20,30]中的元素与列表[1,2,3]元素分别相加,将得到的元素放于
  一个列表中
  L=[x+y for x in [10,20,30] for y in [1,2,3,]]
练习:
  1.用字符串'ABC'和'123'生成如下列表:
  ['A1','A2','A3','B1','B2','B3','c1','C2','C3']
  2.已知有一个字符串:s='100,200,300,500,800',将其转化为数字的列表,列表
  内部为整数:L=[100,200,300,500,800]
  3.用列表推导式生成如下列表:L=[1,4,7,10,...100]
  4.用列表推导式生成如下列表(思考题)
  [[1,2,3],[4,5,6],[7,8,9]]

练习:
1.有一些数存于列表中.如L=[1,3,2,1,6,4,2,...98,82]
  1)将列表L中出现的数字存如到另一个列表L2中
     要求:
     重复出现的数字只在L2中保留一份
  2)将列表中出现的数字存于列表L3中,重复出现的数字只在L3中只保留一份
2.计算出100以内的全部素数,将这些素数存于列表中,让后打印这些列表中的这些素数
3.生成前40个斐波那契(Fibonacci)数列的数
1 1 2 3 5 8 13 21
要求:将这些数保存于列表中,打印这些数