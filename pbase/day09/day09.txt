函数的参数:
    1.函数实际调用参数传递(把数据给函数)
    2.函数的形式参数(从调用者拿(接受)来数据)
函数的实际调用参数传递
    传递方式
        1.位置传参
          1.1 序列传参
        2.关键字传参
          2.2字典关键字传参
位置传参:
    实际参数(实参)的对应关系与形式参数(形参)的对应关系是
    按位置来依次对应的
    示意:
    def mymin(a,b,c):
        pass
    mymin(1,2,3)
    说明
      实参个数必须与形参个数相同
    示例见:
序列传参:
    序列:字符串,列表,元组
        序列传参是指在函数调用过程中,用*(星号)将序列拆解
        后按位置进行传递的传参方式
    示例:
    def mymin(a,b,c):
        print('a的值是:',a)
        print('b的值是:',b)
        print('c的值是:',c)
    mymin(1,2,3)#位置传参
    mymin(4,5,6) #位置传参
    s1=[11,22,33]
    mymin(s1[0],s1[1],s1[2])  #序列传参
    mymin(*s1)#序列传参   fun1(11,22,33)
    s2=(44,55,66)
    s3="ABC"
    mymin(*s2)
    mymin(*s3)
    说明:
        序列传参时,序列拆解的位置将于形参一一对应
        序列的位置信息对应相应的参数位置
关键字传参:
    关键字传参是指传参时,按着形参的名称给形参赋值
    实参和形参按名称进行匹配
    示例:
    def mymin(a,b,c):
        print('a的值是:',a)
        print('b的值是:',b)
        print('c的值是:',c)
    mymin(c=300,b=200,a=100)
    mymin(b=20, c=30,a=10)
    mymin(c=3,b=2,d=1)  #报错

    说明:
        实参和形参可以不安位置进行匹配
字典关键字传参
    是指实参为字典 将字典用**(双星号)拆解后进行关键字传参的传参方式
    示例
    def mymin(a,b,c):
        print('a的值是:',a)
        print('b的值是:',b)
        print('c的值是:',c)
    d1={'c':33,'b':22,'a':11}
    mymin(**d1)
    说明:
        字典的键名和形参必须一致
        字典的键名必须是字符串,且必须为标识符的命名规则
        字典的键名要在形参中存在
 函数综合传参
    函数的传参方式,再能确定形参能唯一匹配到相应实参的情况下可以任意组合
    函数的位置传参要先于关键字传参
    1.函数的位置传参和序列传参可以混和使用,可以顺序颠倒
    myfun(100,*[200,300])
    myfun(*[100,200],300)
    myfun(*[100],200,*[300])
    2.函数位置传参和关键字传参可以混合使用
    myfun(100,c=300,b=200)
    myfun(100,**{'c)

----------------------------以下讲的是函数的定义及函数的形参

函数的缺省参数
    语法:
      def 函数名(形参名1=默认实参1,形参名=默认实参2...)
          语句块
    示例见:
    def info (name,age=1,address='不详'):
        print(name,'今年',age,'岁','家庭住址:',address)
    info('魏明泽',35,'北京市朝阳区')
    info('Tarena',16)
    info('张飞')
    说明:
      1.缺省参数必须自右至左依次存在,如果一个参数有缺省参数,则其右
       侧的所有参数必须有缺省参数
      2.缺省参数可以有0个,1个和多个,甚至全部都是缺省参数
      示例:
      def fn(a,b=10,c):     #错的
      def fn(a,b=10,c=20)   #对的
练习:
    写一个程序myadd,此函数可以计算两个数,三个数和四个数的和
    如:
    def myadd(...):
        ....
    print(myadd(10,20))   #30
    print(myadd(100,200,300))   #600
    print(myadd(1,2,3,4))     #10
函数形参的定义方式:
    位置形参
    星号元组形参
    命名关键字形参
    双星号字典形参
位置形参:
    语法:
      def 函数名(形参名1,形参名2...):
          语句块
星号元组形参:
    语法:
      def 函数名(*元组形参名):
          语句块
    作用:
      收集多余的位置形参
    说明:
      元组形参名一般命名为'args'
    示例见:
    def func(*args):
        print("用户传入的参数是:",len(args))
        print('args=',args)
    func()
    func(1,2,3)
    func(1,2,3,'AAA',"BBB",'CCC')
练习:
    1.写一个函数,mysum可以传入任意个数字的实参,此函数调用将返回实参的和
    如:
    def mysum(...):
        ...
    print(mysum())
    print(mysum(1,2,3))
    2.写一个函数min_max()函数,此函数至少要传入一个参数,并返回全部这些数数
    的最大值,最小值(形成元组,最小值在前,最大值在后),调用此回函数,得到最小值
    和最大值并打印出来
    如:
    def min_max(...):
        ,,,
    print(min_max(10,20,30))
    x,y=min_max(8,6,4,3,9,2,1)
    print('最小值:',x)
    print('最大值:',y)
    print(min_max())
命名关键字形参:
    语法:
      def 函数名(*,命名关键字形参1,命名关键字2,...):
          语句块
      # 或
      def 函数名(*args,命名关键字形参1,命名关键字形参2,...):
          语句块
    作用:强制所有的命名关键字形参都必须用关键字传参或字典关键字传参
    示例:
    # def f2(a,b,*args,c,d):
    #     print(a,b)
    #     print(args)
    #     print(c,d)
    # f2(1,2,3,4,d=200,c=100)
    # f2(11,22,33,**{'c':11,'d':22})
双星号字典形参:
    语法:
      def 函数名(**字典形参名):
          语句块
    作用:
      收集多余的关键字形参
    说明:
      字典形参命名一般命名为"kwargs"
    示例:
# def fun(**kwargs):
#     print("关键字传参个数是",len(kwargs))
#     print('kwargs=',kwargs)
# fun(a=1,b='BBBB',c=[2,3,4])   #关键字传参
# fun()


函数的参数说明:
    位置形参,星号元组形参,命名关键字形参,双星号字典形参,缺省函数可以混合使用
函数参数自左至右的顺序:
    位置形参星
    号元组形参
    命名关键字形参
    双星号字典形参
示例:
    def fx(a,b,*args,c,d,**kwargs):
        pass
    fx(1,2,3,4,5,c='c',d='D',e='E')

可以接受任意位置传参和关键字传参的函数:
    def fn(*args,**kwargs):
        pass


思考题:
    查看>>>helo(print)
    猜想print()函数是形参列表是如何定义的?
    def (*args,sep=' ',end='\n')
    查看>>>range()函数猜想它的形参列表是如何定义的

练习:
    写一个myrange函数,参数可以传入1-3个,实际含义与range 函数相同
    此函数返回range(...)函数列表
    如:
      L = myrange(4)
      print(L)  # [0, 1, 2, 3]
      L = myrange(4, 6)
      print(L)  # [4, 5]
      L = myrange(1, 10, 3)
      print(L)  # [1, 4, 7]
      (注:可以调用)



全局变量和局部变量
    局部变量:
      定义在函数内部的变量秤为局部变量(函数的形参也是局部变量)
      局部变量只能在函数内部使用
      局部变量在函数调用时才能够被创建,在函数调用之后会自动销毁
    全局变量:
      定义在函数外部,模块文件内部的变量称为全局变量
      全局变量所有的函数都可以直接访问(但不能直接将其赋值)
    示例:
        a=100
        b=200
        def fx(c):
            d=400
            print(a,b,c,d)
        fx(300)
        print('a=',a)
        print('b=',b)
    说明:
        在函数内部的赋值语句会创建局部变量,不会对全局变量造成影响
        局部变量只能在其被声明的函数内部访问,而全局变量可以在整个模块范围内访问

globals()和locals()函数
    globals()返回当前全局作用域内变量的字典
    locals() 返回当前局部作用域内变量的字典
  示例:
    a=1
    b=2
    c=3
    def fn(c,d):
        e=300
        print("locals()返回:",locals())
        print("globals()返回:",globals())
        print(c)  #访问局部变量100
        print(globals()['c'])      #访问全局变量c
    fn(100,200)



练习:
    素数/质数
    2,3,5,7,11,13
    1.写一个函数isprime(x)判断x是否是素数,如果是素数返回True,否则返回False
      def isprime(x):
        ...
      print(isprime(4))  #False
      print(isprime(5))  #True
    2.写一个函数prime_m2n(m,n)返回从m开始,到n结束的范围内的素数(不包含n),返回
    这些素数的列表,并打印
    如:
    L=prime_m2n(5,10)
    print(L)   #[5,7]
    3.写一个函数primes(n)返回指定范围n以内的素数(不包含n)的全部素数的列表,并打印
    L=primes(10)
    print(L)   #[2,3,5,7]
      1)打印100以内的全部素数
      2)打印200以内的全部素数的和
    4)改下之前的学生信息管理程序:改为用两个函数实现
      1.写函数input_student()来获取学生信息,当输入姓名为空时结束输入,形成字典组成
      的列表并返回
      2.写函数print_student(L)将上述函数得到的打印成为表格显示
      如:
        def input_student():
            ...
        def print_student(L):
            ...
        L=input_student()
        print(L)
        print_student(L)
        
























