生成器　Generator (python2.5及之后)
  生成器是能够动态提供数据的可迭代对象
  生成器是在运行时生成数据，与容器类不同，他通常不会在内存中保存大量的数据，而是现用现生成
生成器有两种：
  １．生成器函数
  ２．生成器表达式
生成器函数：
  含有yield语句的函数是生成器函数，此函数被调用将返回一个生成器对象
  yield 翻译为（产生或生成）
yield 语句
  语法:
    yield 表达式
  说明:
    yield 用于def 函数中，目的是将此函数作为生成器函数使用
    yield 用来生成数据，供迭代器的next(it) 函数使用
示例
    gen_function.py
生成器函数说明：
  １．生成器函数调用将返回一个生成器对象，生成器对象是可迭代对象
  ２．在生成器函数内调用return语句会触发一个StopIteration
    异常（即生成数据结束）
生成器函数的应用示例：
　myinteger.py
练习：
  写一个生成器函数myeven(start, stop)，用来生成从start开始，到stop结束区间内的一系列偶数

  def myeven(start, stop):  # 不包含stop
      .... 此处自己实现

  it = iter(myeven(5, 10))
  print(next(it))  # 6
  print(next(it))  # 8

  evens = list(myeven(10, 20))
  print(evens)  # [10, 12, 14, 16, 18]
  for x in myeven(21, 30):
      print(x)  # 22 24 26 28
生成器表达式:
  语法:
    (表达式 for 变量 in 可迭代对象 [if 真值表达式])
  说明:
    if 子句可以省略
  作用:
    用推导式的形式生成一个新的生成器   
示例：  
    gen = (x ** 2 for x in range(1, 5))
    it = iter(gen)
    next(it)  # 1
    next(it)  # 4
    next(it)  # 9
    next(it)  # 16
练习：
    已知有列表：Ｌ＝[2,3,5,7,10,15]
    1)写一个生成器函数，让此函数能动态提供数据，数据为原列表的数字的平方加１
    2)写一个生成器表达式，让此函数能动态提供数据，数据依旧为原列表的数字的平方加１
    1)写一个列表，此列表内的数据为原列表的数字的平方加１
看程序执行结果有什么不同:
 1) 程序1
  L = [2, 3, 5, 7]
  lst = [x*10 for x in L]
  it = iter(lst)
  print(next(it))  # 20
  L[1] = 30
  print(next(it))  # 30
 2) 程序2
  L = [2, 3, 5, 7]
  lst = (x*10 for x in L)
  it = iter(lst)
  print(next(it))  # 20
  L[1] = 30
  print(next(it))  # 300
练习：
    １.写一个生成器函数，给出开始值begin和终止值ｅｎｄ,此生成器函数生成begin~end氛围
    内的全部素数（不包含end)
    如：
    def prime(begin,end):
        ...
    L=list(prime(10,20))
    print(L)

迭代工具函数:
    用来生成一个个性化的可迭代对象

函数名                            函数说明
  zip(iter1, iter2, iter3, ....) 返回一个zip对象，此对象用于生成一个元组，
  元组的数据分别来自于参数中的每个可迭代对象，生成元组的个数由最小的可迭代对象决定

  enumerate(iterable, start=0) 返回一个enumerate生成器对象，此对象生成类型
  为（索引，值）的元组，默认索引从零开始，也可用start指定
  示例:
    numbers = [10086, 10000, 10010, 95588]
    names = ['中国移动', '中国电信', '中国联通']
    for t in zip(numbers, names):
        print(t)
    for n, m in zip(numbers, names):  # 等同于序列赋值
        print(m, '的客服号码是:', n)

    for t in zip(range(2), numbers, names):
        print(t)

    d = dict(zip(numbers, names))  # ???

    for t in enumerate(names):
        print(t)  # (0, '中国移动') ....

    for t in enumerate(names, 20000):
        print(t)  # (20000, '中国移动') ....

zip函数的实现（用生成器函数实现）
  示例：
    myzip.py
练习:  见　　myzip.py
  写一个程序，读入任意行文字，当输入空行时结束输入
    打印带有行号的输入结果
      如:
        请输入:hello
        请输入:world
        请输入:python
        请输入:<回车>
      输入如下:
        第1行: hello
        第2行: world
        第3行: python
字节串和字节数组
　回顾：
  　序列：
      列表，元组，字符串，字节串，字节数组
字节串（也叫字节序列）：
  作用：
    存储以字节为单位的数据
  说明：
    字节串是不可改变的序列
字节：　
  字节是０－２５５之间的整数，用来表示字节的取值
位　bit
  1byte=8bit
创建空字节串的字面值
  b''
  b""
  b''''''
  b""""""
创建非空的字节串字面值：
  b'ABCD'
  b"ABCD"
  b'\x41\x42\x43\x44'
  b'中文'　　　#报错
字节串构造函数　bytes
  bytes()  生成一个空的字节串，等同于b''
  bytes(整型可迭代对象)　　＃用可迭代对象初始化一个字节串
  bytes(整数n)  生成n个值为0的字节串
  bytes(字符串, encoding='utf-8')  用字符串的转换编码生成一个字节串
  例:
    b = bytes()　　　#b=b''
    b = bytes(range(65,70))  #b=b'ABCDE'
    b = bytes(5)  #b=b'\x00\x00\x00\x00\x00'
    b = bytes('你好', 'utf-8')   #
    b=bytes('ABC','utf-8')    #b=b'ABC'
bytes 运算：
  同其他的序列的运算规则相同
  　＋　　+=　　＊  *=
   <  <=  >  >=  ==  !=
   in/ not in
   索引和切片
  
能用于字节串和字节数组的函数：
  len(x),max(x),min(x),sum(x),any(x),all(x)
bytes和str的区别
  bytes 存储字节（字节是０－２５５的整数）
  str 存储unicode字符（字符是0-65536的整数）

bytes 与　str转换
      编码(encode)
  str------------->bytes
      b=s.encode(encoding='utf-8')
          解码(decode)
  bytes------------>str
      s=b.decode(encoding='utf-8')
示例：
  s='我是中文'
  b=s.encode('utf-8')
  s2=b.decode('utf-8')
字节数组　bytearray
    可变的字节序列
字节数组的构造函数　bytearray
    bytearray()  生成一个空的字节数组
    bytearray(整型可迭代对象)　　＃用可迭代对象初始化一个字节数组
    bytearray(整数n)  生成n个值为0的字节数组
    bytearray(字符串, encoding='utf-8')  用字符串的转换编码生成一个字节数组
运算：
  运算规则同序列完全相同
  +  +=  *  *=
  <  <=  >  >=  ==  !=
  in /not in
  索引　／　切片
  字节数组支持索引和切片的赋值操作，规则同列表的赋值规则完全相同
字节串的方法见文档：
练习：
　　有一个bytearray 字节数组　ba=bytearray(b'a1b2c3d4')
    如何得到字节串'1234'和'abcd',将上述字节数组改为：
    ba=bytearray(b'A1B2C3D4')
ba=bytearray(b'a1b2c3d4')
b1=ba[1::2]
b1=bytes(b1)
b2=ba[::2]
ba[::2]=[ord('A'),ord('B'),ord('C'),ord('D')]
print(b1,b2,ba)

练习：
  １．打印９＊９乘法表。
    １×１＝１
    １＊２＝２　２＊２＝４
    １＊３＝３　２＊３＝６　３＊３＝３
    ...
    1*9=9 ...                         9*8=81
  2.写一个生成器函数 myrange([start, ]stop[, step]) 来生成一系列整数
     要求:
       myrange功能与range功能完全相同
       不允许调用range(函数)
     然后用自己写的myrange结合生器表达式求1~100内奇数的平方和
  ３.写一个myfilter生成器函数，功能与filter函数功能完全相同
  　如：
      def myfilter(fn,iter1):
         ...
      L=[x for x in myfilter(lambda x: x%2, range(10))]
          #  L=[1,3,5,7,9]
  4.将以前所有练习自己不看之前的代码重写一遍




