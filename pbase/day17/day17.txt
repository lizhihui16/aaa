day16
文件：
  长期存储数据
  单位是字节
  文件的操作：
  　１.打开文件
  　２.读／写文件
  　３.关闭文件
        缓放资源
    



day17
面向对象编程：Object-Oriented Programming
什么是对象
　　对象是指现实中的物体或实体
什么是面向对象
　　把一切看成对象(实例), 用各种对象之间的关系来描述事务
对象都有什么特征:
　　对象有很多属性(名词，形容词)
    　姓名,性别, 年龄, ...
　　对象有很多行为(动作，动词)
    　学习，吃饭，睡觉，工作, ....
什么是类:
  　拥有相同属性和行为的对象分为一组，即为一个类
  　类是用来描述对象的工具，用类可以创建此类的对象(实例)
示意:
  车(类)  ------>> BYD E6 (京A.88888) (实例，对象)
        \
         \----->> BWM X5 (京B.66666) (对象)
  狗(类)  ------>> 京巴 (户籍号: 000001)
        \
         \----->> 导盲犬 (户籍号: 000002)
  int(类) ------>> 100  (对象,实例)
         \
          \----->> 200 (对象,实例)
类的创建语句: 
  class 语句
  语法:
    class 类名(继承列表):
        ''' 类的文档字符串'''
        实例方法定义
        类变量定义
        类方法定义(@classmethod)
        静态方法定义(@staticmethod)
  作用:
    创建一个类
    用于描述此类对象的行为和属性
    类用于创建此类的一个或多个对象(实例)
  说明:
    继承列表可以省略，省略继承列表表示类继承自object
    类名必须为标识符
    类名实质上是变量，它在创建时绑定一个类
  示例见:
    class.py
构造函数:
  构造函数调用表达式：
    类名([创建传参列表])
  作用:
    创建这个类的实例对象，并返回此实例对象的引用关系
  说明:
    1. 实例有自己的作用域和名字空间，可以为该实例添加实例变量(也叫属性)
    2. 实例可以调用类方法和实例方法
    3. 实例可以访问类变量和实例变量
  示例见：
  　　constr.py
实例方法(instance method):
  语法:
    class 类名(继承列表):
        def 实例方法(self, 形参1, 形参2, ...):
            '''方法的文档字符串'''
            语句块
  作用:
    用于描述一个对象的行为，让此类型的全部对象都拥有相同的行为
  说明:
    实例方法的实质是函数，是定义在类内的函数
    实例方法至少有一个形参，第一个形参绑定调用这个方法的实例，一般命名为'self'
  实例方法的调用语法:
    实例.实例方法名(调用传参)
    或
    类名.实例方法名(实例, 调用传参)
　示例见：
    　instance_method.py

实例属性 instance attribute (也叫实例变量)
   每个实例可以用自己的变量，称为实例变量(也叫属性)
  使用语法:
    实例.属性名
  属性的赋值规则:
    1. 首次为属性赋值则创建此属性
    2. 再次赋值则改变属性的绑定关系
  作用:
    记录每个对象自身的数据
  示例见:
    instance_attribute.py
练习：
    定义一个‘人’类
     class Human:
      def set_info(self, name, age, address='不详'):
          '''此方法为'人', 添加:姓名,年龄，家庭住址属性'''
          # ... 此处自己实现
      def show_info(self):
          '''此处显示此人的信息'''
          # ... 此处自己实现
        如:
        h1 = Human()
        h1.set_info('小张', 20, '北京市朝阳区')
        h2 = Human()
        h2.set_info('小李', 18)
        h1.show_info()  # 小张 今年 20 岁 家庭住址: 北京市朝阳区
        h2.show_info()  # 小李 今年 18 岁 家庭住址: 不详

del 语句用于删除实例属性
  del 语句
  语法:
    del 对象.实例变量
del 语句小结
    1)删除变量
    　del a,b,c
    2)删除列表中的元素
    　del L[0]
    3)删除字典的键值对
    　del d['score']
    ４)删除对象的属性
    　del obj.attr
初始化方法:
  作用:
    对新创建的对象添加属性
  语法格式:
    class 类名(继承列表):
        def __init__(self[, 形参列表]):
            语句块
    注: [] 里的内容代表可省略

  说明:
    1. 初始化方法名必须为'__init__'不可改变
    2. 初始化方法会在构造函数创建实例后自动调用，且将实例自身通过第一个参数self 传入 __init__ 方法
    3. 构造函数的实参将通过 __init__方法的参数列表 传入到 '__init__' 方法中
    4. 初始化方法必须返回None
  示例见:
    init_method.py
练习:   init_method.py
  写一个学生类Student类，此类用来描述学生信息
  　学生信息有：
    　　姓名，年龄，成绩
     1) 为该类添加初始化方法，实现在创建对象时自动设置 '姓名', '年龄', '成绩' 属性
     2) 添加 set_score 方法，能为对象修改成绩信息
     3) 添加show_info方法打印学生对象的信息
    class Student:
        def __init__(.......):
             .....
        def set_score(self, score):
            ....
        def show_info(self):
            ....
    L=[]
    L.append(Student('小张',20,100))
    L.append(Student('小李',20))
    L.append(Student('小赵',19,85))
    for s in L:
        s.show_info()
    L[1].set_score(70)
    ...
析构方法
  语法:
    class 类名(继承列表):
        def __del__(self):
            ....
  作用:
    在对象销毁前释放此对象占用的资源
  说明:
    1. 析构方法会在对象销毁前自动调用
    2. python语句建议不要在对象销毁时做任何事情，因为对象销毁的时间难以确定
  示例:
    del_method.py

预置的实例属性
　__dict__属性
     __dict__属性绑定一个存储此实例自身变量的字典
　示例见：
　　class Dog:
        pass
    dog1=Dog()
    print(dog1.__dict__)  #{}
    dog1.kinds='京巴'
    print(dog1.__dict__)  #{'kindds':'京巴'}
__class__ 属性
  __class__属性绑定创建此实例的类(类实例)
  作用:
    可以借助于此属性来访问创建此实例的类

  示例:
    class Dog:
        pass
    dog1 = Dog()
    print(dog1.__class__)
    dog2 = dog1.__class__()
    print(dog2.__class__)
面向对象综合练习：
  有两个人（ Human ）:
    1. 姓名: 张三，年龄: 35岁
    2. 姓名: 李四，年龄: 8岁
    行为:
      1. 教别人学东西 teach
      2. 工作赚钱 work
      3. 借钱 borrow
      4. 显示自己的信息
    用程序描述如下事情:
      张三 教 李四 学 python
      李四 教 张三 学 王者荣耀
      张三 上班 赚了 1000元钱
      李四 向 张三 借了 200元钱
      显示李四的全部信息
      显示张三的全部信息

      class Human:
         ....
      
      zahng3=Human('张三’，３５)
      li4=Human('李四',8)

    zhang3.teach(li4,python)
    li4.teach(zhang3,'王者荣耀')
    zhang3.work(1000)
    li4.borrow(zhang3,200)
    zhang3.show_info()
    li4.show_info()

用于类的函数:
  isinstance(obj, class_or_tuple)  返回这个对象obj 是否是某个类的对象，
  或者某些类中的一个类的对象，如果是则返回True,否则返回False
  type(obj)  返回对象的类型（类）
示例; 
  isinstance(100,int)   #True
  isinstance(3.14,int)   #False
  class Dog:
      pass
  dog1=Dog()
  isinstance(dog1,Dog)  #True 
  type(dog1) is Dog   #True

练习：
　  1.为学生信息管理项目添加两个功能
     | 9)  从文件中读取数据(si.txt)   　 |
     | 10) 保存信息到文件(si.txt) 　 |

    (要求，每个功能只要有一个函数与之相对应)























