异常（基础）　exception

  什么是错误
    错误是指由于逻辑或语法等导入一个程序无法正常执行的问题
  什么是异常
    异常是程序出错误时标示的一种状态
    当异常发生时，程序不会再向下执行，而转去调用此函数地方待处理此错误并恢复为正常状态
　作用:
    用作信号,通知上层调用者有错误需要处理
　语句　try
    两种语法：
    　ｔｒｙ－except 语句
    　try-finally 语句
try-except 语句
　语法：
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量名1]:
        异常处理语句1
    except 错误类型2 [as 变量名2]:
        异常处理语句2
    except (错误类型3, 错误类型4) [as 变量3]:
        异常处理语句3
    ...
    except:
        异常处理语句other
    else:
        末发生异常语句
    finally:
         最终语句
  作用:
    偿式捕获异常通知，将程序由异常流程转为正常状态并继续执行
　说明：
    except子句可以有一个或多个，但至少要有一个
　示例见：
    try-except.py
练习：
　１．写一个函数get_score()来获取学生输入的成绩（０－１００）的数，如果用户
　输入的不是０－１００的整数则返回０，否则返回输入的整数
如：
    def get_score():
        ...
    score=get_score()
    print("你输入的成绩是：",score)

try-finally 语句
  语法:
    try:
        可能触发异常的语句
    finally:
        一定要执行的最终语句
  说明:
    1. finally 子句不可以省略
    2. 一定不存在except子句
  作用:
    通常用try-finally语句来做触发异常时必须要处理的事情,无论异常是否发生，finally子句都会被执行
  注:
    try-finally 语句不会改变程序的状态（正常/异常)状态
　示例：　
    try.py

raise 语句
  作用:
    触发一个错误，让程序进入异常状态
    发生错误通知给调用者
  语法:
    raise 异常类型
    或
    raise 异常对象
    或
    raise  #重新触发上一次异常
  示例见：   try.py
    def make_except():
        print("函数开始")

        raise ZeroDivisionError

        print("函数结束")
    try:
        make_except()
    except ZeroDivisionError:
        print("接受到make_except发出的错误通知")

    print("程序正常结束")
　示例：　
    写一个函数get_age()用来获取一个人的年龄信息，此函数规定用户只能
    输入１－１４０之间的整数，如果用户输入的数是其他的数值，则直接触发
    ValueError类型的错误！
    如：
    def get_age():
        ...
    try:
        age=get_age()
        print("用户输入的年龄是",age)
    except ValueError as err:
        print("用户输入的不是１－１４０的数字，获取年龄失败")

assert 语句（断言语句）
　　语法：
    　assert 真值表达式，错误数据（通常是字符串）
　　作用：
    　当真值表达式为Ｆａｌｓｅ时，用错误数据创建一个AsseertionError
    类型的错误，并进入异常状态
　　等同于：
    　if bool(真值表达式)==False:
         raise AssertionError(错误数据)
    示例见：
    　assert.py
异常小结:
  语句:
    try-except
        捕获异常，将程序由异常状态转化为正常状态
    try-finally
        执行必要执行的语句
    raise
        发送异常通知，将程序转为异常状态（进入异常流程)
    assert
        根据条件来触发AssertionError类型的异常，并进入异常流程


迭代器　　Iterator
　　什么是迭代器
    　迭代器是访问可迭代对象的工具
    　迭代器是指用iter(obj)函数返回的对象（示例）
    　迭代器可以用next(it)函数获取可迭代对象的数据
迭代器函数：
　　iter(iterable)从可迭代对象中返回一个迭代器，iterable　必须是
    能提供一个迭代器的对象
　　next(iterator)从迭代器iterator中获取下一个记录，如果无法获取下一条记录
    则触发StopIterator异常通知
　说明：
    迭代器只能往前取值，不会后退
　示例：　
    L=[1,3,5,7]
    it=iter(L) 　#让iter函数从Ｌ中获取迭代器
                ＃it　绑定的是迭代器
    print(next(it))   # 1
    print(next(it))   # 3
    print(next(it))   # 5
    print(next(it))   # 7
    print(next(it))   # StopIteration


用迭代器和while来代替for循环
  示例：　
  L=[2,3,5,7]
  it=iter(L)
  while True:
      x=next(it)
      print(x)

练习：
　　有一个集合：s={'唐僧','悟空','八戒','沙僧}
    用for语句遍历所有元素如下：
    for x in s:
        print(x)
    else:
        print('遍历结束')
    请将上面的for语句改写为while语句和迭代器实现
练习：
  1. 一个球从100米高空落下，每次落地后反弹高度为原高度的一半，再落下，写程序
     1) 算出皮球在第10次落地后反弹多高
     2) 打印１０次皮球反弹后共经历了多少米路程
  2. 分解质因数,输入一个正整数，分解质因数
     如输入: 90 则打印:
        90 = 2*3*3*5
     (质因数是指最小能被原数整除的素数(不包含1))