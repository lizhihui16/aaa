机器学习
一、概述
1.什么是机器学习？
    人工智能：通过人工的方法，模拟某些人类的智能行为。
    机器学习：通过人工的方法，模拟某些人类的学习行为。
    自适应，自完善，自发展系统。
    定义：一个计算机程序在完成任务T之后，获得经验E，其表现效果为P，如果任务T的性能表现，也就是用以衡量的P，
        可以随之E的增加而增加，那么这样的程序就可以被称为机器学习系统。
2.为什么需要机器学习？
    1)具有机器学习能力的系统具备更好的可维护性。
    2)机器学习可以解决那些算法过于复杂甚至没有的算法的问题。
    3)利用机器学习发现隐藏在数据中的潜在规则。
3.机器学习的种类
    1)有监督学习、无监督学习、半监督学习和强化学习
      有监督学习：训练数据中包含已知的输出
      无监督学习：训练数据中没有已知的输出，从输入数据自身的特征中识别某种模式
      半监督学习：先用无监督学习的方法做类别划分，在通过有监督学习的方法按照标签识别。
      强化学习：利用智能体根据奖惩进行取舍，按照趋利避害的原则自我完善。
    2)批量学习和在线学习
      批量学习：一次性训练，使用中不再继续完善。
      在线学习：不断地训练，使用的同时继续完善。
    3)基于实例的学习和基于模型的学习
      基于实例的学习：历史的可重复性，凭经验。
      基于模型的学习：从历史经验中抽象出规则。
4.机器学习的一般流程
    获取数据
    划分训练集和测试集
    选择模型(算法)<-\ <-\
    验证模型---------/      |
    训练模型<-\                |
    测试模型---/----------/
    使用模型
    维护模型
二、数据预处理
    一行一样本，一列一特征。
    姓名 学号 年龄 身高 体重
    张三 1      20   1.7   50
    李四 2      22   1.75 60
    ...
    1.标准化：将样本矩阵中各列的平均值和标准差统一为0和1。
        [a b c]
        m=(a+b+c)/3
        s=sqrt(((a-m)^2+(b-m)^2+(c-m)^2)/3)
        a'=a-m
        b'=b-m
        c'=c-m
        [a' b' c']
        m' = (a'+b'+c')/3 = (a+b+c)/3 - m = 0
        s' = sqrt((a'^2+b'^2+c'^2)/3) = s
        a" = a'/s
        b" = b'/s
        c" = c'/s
        [a" b" c"]
        s"=sqrt((a"^2+b"^2+c"^2)/3)
        = sqrt((a'^2+b'^2+c'^2)/(3s^2))
        = 1
        代码：std.py
        import sklearn.preprocessing as sp
        sp.scale(原始样本矩阵)->标准化样本矩阵
    2.范围缩放：是样本矩阵中每一列的最大值和最小值为某个给定值([0, 1])，其它元素线性缩放。
        A     B     C
        max        min
        Ak+b->A' max 1
        Bk+b->B'
        Ck+b->C' min  0
        [A B C] - min
        ---------------
        max - min
        mms = sp.MinMaxScaler(feature_range=(0, 1))
        mms.fit_transform(原始样本矩阵)->范围缩放后的样本矩阵
        代码：mms.py
    3.归一化
                Python Java PHP
        2016  10         30     10
        2017  20         30     5
        2018  5           1       0
        用样本中的各个特征除以该样本所有特征的绝对值之和，使得处理后的样本矩阵中各行所有列中元素的绝对值之和为1。
        sp.normalize(原始样本矩阵, norm='l1')->归一化样本矩阵
        l1：l1范数，矢量中各元素绝对值的1次方之和
        l2：l2范数，矢量中各元素绝对值的2次方之和
        ...
        lk：lk范数，矢量中各元素绝对值的k次方之和
        代码：nor.py
    4.二值化
    根据一个事先设定的阈值，将样本矩阵中不大于阈值的元素设定为0，大于阈值的元素设定为1。
    bin = sp.Binarizer(threshold=阈值)
    bin.transform(原始样本矩阵)->二值化样本矩阵
    代码：bin.py
    5.独热编码
    1        3         2
    7        5         4
    1        8         6
    7        3         9
    1-10  3-100     2-1000
    7-01  5-010     4-0100
          8-001     6-0010
                    9-0001
    101001000
    010100100
    100010010
    011000001
    ohe = sp.OneHotEncoder(sparse=紧缩格式(默认True),
        dtype=目标类型)
    ohe.fit_transform(原始样本矩阵)->独热编码样本矩阵
    代码：ohe.py
    6.标签编码
    将一列字符串形式的特征值，按照字典排序，用每个字符在排序序列中的索引号表示该字符。
    lbe = sp.LabelEncoder()
    lbe.fit_transform(原始样本矩阵)->标签编码样本矩阵
    lbe.inverse_transform(标签编码样本矩阵)->原始样本矩阵
    代码：lab.py
    三、线性回归和梯度下降算法
    根据机器学习的任务把不同的业务模型划分为四种基本问题：
    回归问题 \ 在有监督条件下，根据已知的输入和输出，构建
    分类问题 / 预测模型，对未知输出的输入给出大概率的输出
    输入 输出
    1      2
    2      4
    3      6
    4      8
    ------- y = x * 2
    5      ? -> 10
    输出是一个连续值，回归问题。
    输入 输出
    1      1
    2      0
    3      1
    4      0
    5      1
    6      0
    ------- 奇数->1，偶数->0
    7      ? -> 1
    输出是一个离散值，分类问题。
    聚类问题：在无监督模式下，根据输入的特征划分族群。
    降维问题：在无监督模式下，对输入特征进行取舍以降低维度。
    输入  输出
    x1     y1
    x2     y2
    ...
    xm    ym
    ----------
    y = w0+w1x - 通过线性方程描述输出和输入之间的关系，已解决回归问题，这就是线性回归。
                            模型参数
                            /      \
    预测函数：y = w0+w1x
    x1 -> y1'=w0+w1x1      y1          (y1-y1')^2
    x2 -> y2'=w0+w1x2      y2          (y2-y2')^2
    ...
    xm->ym'=w0+w1xm    ym         (ym-ym')^2
                |                              |                   |
        预测输出                 实际输出     单样本误差
    总样本误差：
    (y1-y1')^2 + (y2-y2')^2 + ... + (ym-ym')^2
--------------------------------------------------- = E 
                                    2
损失函数：E = Loss(w0, w1)
损失函数体现了总样本误差即损失值随着模型参数的变化而变化。回归问题的等价问题就是求损失函数的极小值，即是E达到极小值的w0和w1。
模型参数的迭代公式：
w0 = w0 - n DE/Dw0
w1 = w1 - n DE/Dw1
DE/Dw0 = 1/2 [2(y1-y1')(-1)  + 2(y2-y2')(-1) + ...]
                = -[(y1-y1') + (y2-y2') + ...]
DE/Dw1 = -[(y1-y1')x1 + (y2-y2')x2 + ...]
代码：bgd.py
基于模型的机器学习实际上就是要找到一个函数，通过实际输出与预测输出之间的误差，表现模型的精度，在求该函数的极小值的过程中，寻找最优的模型参数。
E = Loss(w0, w1) - 正则项 x 正则强度(C)







