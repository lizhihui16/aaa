1. 背景相关的属性
	1. 背景颜色
		属性 background-color
		取值 颜色值
		注意 
			 1. 背景颜色从边框位置开始绘制
			 2. 如果元素添加内边距，也会按照背景颜色进行填充
			 3. 所有元素默认背景颜色都为透明，新建窗口为白色并不是body的背景颜色，是窗口渲染的结果
	2. 背景图片
		属性 background-image
		取值 url("图片路径")
	3. 背景图片平铺显示
		如果背景图片尺寸小于元素尺寸。会自动对图片进行重复平铺，直到把元素铺满
		属性 background-repeat
		取值 
			1. repeat 默认值，沿水平和垂直方向平铺
			2. no-repeat 不重复平铺
			3. repeat-x 横向平铺
			4. repeat-y 纵向平铺
	4. 背景图片尺寸
		属性 background-size
		取值
			1. 像素值
                取两个值，分别表示背景图片的宽高
                取一个值，设置背景图片宽度，高度等比缩放
			2. 百分比 采用当前元素的尺寸获取
			包含 width height 两个值
                百分比取一个值或两个值等同于像素的取值情况
                百分比参照当前元素的宽高计算
			------
			3. cover 将图片等比拉伸至完全覆盖元素，超出部分裁减掉
			4. contain 将图片等比拉伸至刚好被元素容纳，未填充到的部分不管
	5. 背景图片的位置
		默认情况下，背景图片从元素的左上角显示
		属性 ：background-position
		取值 ：
			1. x y
				以像素为单位的数值，使用空格隔开
				x : 背景图片水平偏移距离
					正值表示向右偏移
					负值表示向左偏移
				y : 背景图片的垂直偏移距离
					正值表示向下偏移
					负值表示向上偏移
			2. x% y%
				百分比参照元素尺寸获取
				1. 0% 0%
					图片显示在左上角
				2. 100% 100%
					背景图显示在右下角
				3. 50% 50%
					背景图显示在中间
			3. 使用方位值表示
				x y
				x ：left / center / right
				y : top  / center /bottom
				如果只设置一个方向上的关键字，另外一个方向默认是center
             "精灵图"技术，网页开发过程中为了节省资源，减少网络请求，通常会将一组小图标以一张图片的形式存储
             通过一次网络请求加载图片，配合background-position控制图标切换显示
	6. 背景属性简写
		属性 ： background
		取值 ： color url() repeat position;
		注意 ：背景图片的尺寸大小需要单独设置
		et :
			div{
				background : red;
			}
			background : url();
			background : red url() no-repeat right bottom;

2. 文本与字体相关属性
	1. 字体属性
		1. 设置字体大小
			属性 ：font-size
			取值 ：px
		2. 指定字体名称
			属性 ：font-family
			取值 ：字体名称，如果出现多个名称，使用,隔开
			注意 ：如果字体名称中出现中文或者空格，要是用引号引起来
			et :
				font-family : Arial,serif;
				font-family : "微软雅黑","黑体";
				font-family : "Microsoft YaHei";
		3. 设置字体加粗
			属性 ：font-weight
			取值 ：
				1. 单词表示
					normal  默认值，正常显示
					bold    加粗显示
					lighter 极细文本
				2. 数字表示
					可以取值100-900之间的整百数值，值越大字体越粗
					400  等价于 normal
					700  等价于 bold
		4. 设置字体样式
			属性 ：font-style
			取值 ：
				1. normal 正常显示
				2. italic 使用斜体
				3. oblique 文本倾斜，出现斜体效果
                    一般作为italic的替换样式，可以实现斜体效果。
                    在某些情况下可以指定倾斜角度
		5. 字体属性简写
			属性 ：font
			取值 ：style weight size family;(顺序强制)
			注意 ：font-size font-family属性值必须写，不写的话整个属性无效
			et :
				font : 18px "黑体";
				font : 18px "黑体",serif;

	2. 文本属性
		1. 文本颜色
			属性 ：color
			取值 ：颜色值
		2. 文本水平对其方式
			属性 ： text-align
			取值 ： left (默认值) /center/right/justify (两端对齐)
		3. 设置行高
			属性 ：line-height
			取值 ：像素值 或无单位的数值，表示是当前文本大小的倍数
			et :
				line-height :32px;
				p{
					font-size: 18px;
					line-height: 2; 
					//行高为字体大小的2倍 36px
				}
			常用 ：使用行高设置一行文本的垂直居中
			用法 ：将元素的行高与高度保持一致
			et :
				div{
					width: 100px;
					height: 50px;
					line-height: 50px
				}
			用法2 ：使用行高对文本上下进行微调
				line-height = height  垂直居中
				line-height > height  文本偏下
				line-height < height  文本偏上
			注意 ：一行文本 在当前行中一定是垂直居中的，上下的空隙由浏览器自动分配
		4. 文本装饰线
			属性 ：text-decoration
			取值 ：
				1. underline :下划线
				2. overline  :上划线
				3. line-through :删除线
				4. none : 针对超链接，取消默认下划线

3. 表格属性
	1. 基础样式属性是通用的
		width height background color margin padding...
	2. 独有的CSS属性
		1. 边框合并
			属性 ：border-collapse
			取值 ：
				1. separate 默认值 边框分离
				2. collapse 边框合并
			注意 ：
				1. td 不支持外边距
				2. 边框合并属性只能写在table标签里
		2. 边框边距
			1. 设置单元格之间的距离
			2. 属性 ：border-spacing
				取值 ：h-Value v-Value
				h-value : 表示水平方向的距离
				v-value : 表示垂直方向的距离
				两个值之间使用空格隔开
			3. 注意 ：
				只能在表格边框分离状态下使用
    3.表格尺寸
        表格在设置宽高时，可以选择
            1.为table标签固定宽高，单元格自动分配大小
            2.为td单元格设置宽高，有内容决定表格整体大小
            二选一
    4.table标签完全支持盒模型，默认采用border-box计算尺寸
      tr,td标签，不完全支持盒模型
      td不支持margin属性


4. 过渡效果
	1. 过渡效果指的是元素CSS属性值在变化时的一种平滑效果
	2. 语法 ：
		1. 指定过渡属性
			作用 ：用来指定哪些CSS属性需要添加过渡效果
			transition-property
			取值 ：
				1. 单个的属性名称
					et :
						transition-property:width;
				2. all
					但凡能添加过渡效果的属性都添加效果
				3. 指定多个属性名称，使用,隔开
					et :
						div{
							width:  100px;
							height: 100px;
							background: red;
							transiton-property:all;
						}
						div:hover{
							width:200px;
							height:200px;
						}

				4. 能够添加过渡效果的属性
					1. 所有颜色相关的属性
					2. 所有取值为数字的属性
		2. 指定过渡时长
			表示在多长时间内完成过渡效果
			属性 ：transition-duration
			取值 ：单位为s（秒）或者是ms（毫秒）的数值
				et :
					1s = 1000ms
					0.3s = 300ms
					.3s = 300ms
		3. 指定过渡效果的速度时间曲率
			属性 ：transition-timing-function
			作用 ：设置过渡效果的变化速率
			取值 ：
				1. ease 默认值 慢速开始，中间快速变快，慢速结束
				2. linear 匀速变化
				3. ease-in 慢速开始，加速结束
				4. ease-out 快速开始，减速结束
				5. ease-in-out 慢速开始和结束，中间过程先加速后减速
		4. 指定过渡延迟
			属性 ：transition-delay
			作用 ：延迟几秒之后再发生过渡效果
			取值 ：s / ms为单位的数值
		5. 使用注意 ：
			1. 其他属性都可以省略（transition-property，timing-function，delay）过渡时长duration必须设置，否则CSS样式的变化就又成瞬时变化，没有过渡效果了
			2. 使用过渡相关的属性时，要定义在元素的默认样式中，不能写在伪类选择器中，会影响过渡效果
			练习 ：
				1. 创建200 * 200 的元素，背景色为红色
				2. 鼠标悬停时：
					1. 尺寸400 * 400
					2. 背景颜色变为绿色
					3. 元素变成圆形
					样式改变在5s内完成
		6. 属性简写
			属性 ： transition
			取值 ： property duration timing-function delay
			注意 ： duration 必须写
            e.g:
                transition:width 2s,height 3s,background 5s;

5. 布局方式
	1. 设置元素在网页中的排列方式和位置
	2. 分类
		1. 普通流布局/标准流布局/文档流布局
			默认布局方式
			特点 ：
				将元素按照书写顺序和元素类型，从左向右，从上至下排列
		2. 浮动布局
			属性 ：float
			取值 ：left / right / none(默认值)
				left :元素向左浮动，停靠在其他元素的边缘
				right : 元素向右浮动，停靠在其他元素的边缘
			特点：
				1. 元素设置浮动之后，会脱离文档流，脱流之后，元素在文档中不占位，呈现一种浮动元素“漂浮”在文档流上方的效果
				2. 浮动元素后面的正常元素会上移，占据原本浮动元素所在的位置
				3. 多个元素同时左浮或右浮，浮动元素会依次停靠在前一个元素的边缘位置，第一个浮动元素会贴着父元素的边框显示
				4. 如果父元素中无法并排显示浮动元素，浮动元素会自动换行显示
				5. 浮动元素在文档中不占位 
				6. 所有类型的元素，只要设置浮动，就可以设置宽高，行内/行内块元素浮动之后，水平方向上就没有空隙了
		3. 浮动元素的特殊效果
			文字环绕效果
			浮动元素虽然会遮挡后面正常的元素，但是不会遮挡正常元素中内容的显示，内容会自动围绕在浮动元素周围显示
		4. 浮动元素对父元素高度的影响
			由于浮动元素在文档中不占位，一旦子元素全部浮动，父元素的高度就变成0，影响父元素背景颜色，背景图片显示，影响后面元素的布局
			解决方式 ：
				1. 指定父元素的高度
					弊端 ：无法确认父元素的高度，不一定每次都清楚知道
				2. 父元素中设置overflow:hidden;
					弊端 ：如果父元素要显示溢出的内容，设置overflow :hidden之后，溢出内容就不显示了
				3. 清除浮动带来的影响
					1. 在父元素的末尾添加空的块级元素
					2. 设置空标签 clear : both;

		5. 清除浮动
			由于浮动元素会对其后正常元素和其父元素带来一定影响，所以在网页布局中要清除这种影响
			属性 ：clear
			取值 ：
				1. none 默认值，不做处理
				2. left
					清除当前元素前面左浮元素带来的影响，当前正常元素左边不允许出现浮动元素
					et :
						.d1{
							float:left;
						}
						.d2{
							clear:left;
						}
						<div class="d1"></div>
						<div class="d2"></div>
				3. right
					正常元素右边不允许出现浮动元素
				4. both
					正常元素两边都不能出现浮动元素
