1. 函数
	1. 函数，就是一段待执行的代码块
	2. 作用 ：
		实现多条语句的封装
		实现代码复用
	3. 函数使用
		1. 函数的声明
		2. 函数的调用
		注意 ：函数先声明后调用（JS中非强制）
	4. 语法 ：
		1. 函数声明
			function 函数名 (参数列表) {
				函数体;
				返回值
			}
			1. JS中函数声明使用function关键字
			2. 函数名自定义，遵照变量命名规范，见名知意
			3. 参数列表，参数表示函数体执行所需要的数据，可以为空，为空时()不能省略；多个参数之间使用,隔开
				et :
					function sum (a,b){
						return a + b;
					}
			4. 返回值 使用return关键字，将函数体内部执行的结果传递给外界使用，只能返回一个值，返回值不需要的话，可以省略return
				et :
					function showFn(){
						console.log("hello");
					}
				注意 ：return一定要写在函数体的末尾，return关键字后面的代码都不执行
			5. 匿名函数
				var fn = function (){
					函数体
				};
		2. 函数调用
			语法 ：函数名();
				   函数名(10,20);
				   var res = 函数名(10,20);
			注意 ：
				1. 函数参数分为形参和实参，函数声明时，使用形参，函数调用时，传递实参
					形参 ：代号
					实参 ：具体的数据
					传参的过程，就是给函数中形参变量赋值的过程

				2. 函数如果有返回值，在调用时，需要定义变量接收返回值
			练习 ：
				改版日期计算器
				1. 整体功能封装在一个函数中
				2. 将闰年判断的功能单独封装在一个函数中
					1. 接收参数 （年份）
					2. 返回布尔值表示是否为闰年
				3. 整体功能中涉及闰年判断的部分，都通过函数调用实现
				4. 添加界面元素 按钮 显示 日起计算器，点击时调用函数实现日期计算

	5. 变量的作用域
		1. 变量的作用域指的是变量起作用的范围
		2. 分类 ：
			1. 全局作用域
				处在全局作用域中的变量就是全局变量
					1. 在function之外通过var声明的变量都是全局变量，在任何地方都可以访问
					2. 声明变量时，省略var关键字，一律是全局变量，推荐使用var关键字，不要省略

			2. 局部作用域 （JS中局部作用域指的是函数作用域）
				局部作用域中的变量就叫局部变量
					1. 在函数内部使用var关键字声明的变量都是局部变量，只在当前函数作用域中可以访问，外界无法访问
					2. 局部变量出了函数就不能访问了
			注意 ：
				在函数中访问变量，
					1. 如果当前函数中没有该变量，就访问全局作用域中的变量
					2. 如果当前函数中定义了该变量，全局中也有相同的变量名，函数就近访问变量
3. 数组
	1. Array 数组是一个有序的元素序列，数组中的元素会自动分配下标，从0开始，方便读写
	2. 创建数组
		1. 创建空数组
			var 数组名 = [];
		2. 创建数组的同时初始化元素
			var 数组名 = [元素1,元素2,...];
		3. 创建空数组
			var 数组名 = new Array();
		4. 创建数组并初始化
			var 数组名 = new Array(元素1,元素2,...);
			注意 ：
				var 数组名 = new Array(Num);
				只包含一个数值参数时，表示初始化数组长度
				et :
					var arr = new Array(5);
	3. 数组的使用
		1. 获取数组的长度
			属性 ： length
			使用 ：数组名.length; //获取数组长度
            arr.length;
		2. 访问数组元素
			数组中每一个元素都有对应的下标
			元素的下标范围 0 -> length-1
			语法 ：数组名[下标];
		3. 设置数组元素
			语法 ：数组名[下标] = value;
	4. 清空数组中元素
		arr.length = 0;
	5. 循环遍历数组
		//正序
		for(var i = 0; i < arr.length; i ++){
			arr[i];
		}
		//倒序
		for(var i = arr.lenth - 1; i >= 0; i --){
			arr[i];
		}
		练习 ：
			1、
				1. 让用户循环录入数据
				2. 将用户输入的数据存储在一个数组中
				3. 当用户输入exit 表示结束输入
				4. 结束之后输出数组中元素
			2、创建一个包含若干整数的数组，找出其中的最大值并输出
			3、创建一个只包含3个数字的数组，按照从小到大排序之后输出数组
			4、声明一个数组包含若干个数字，从弹框中接收用户输入一个数字，
                查询数组，如果数组中存在对应的元素，输出其下标，没有提示数据不存在

    6. 数组的API
        1. toString()
            作用 ：将数组中的元素转换为字符串返回
            返回值 ：字符串
            et :
                var arr = [1,2,3];
                var s = arr.toString();
                console.log(s); //"1,2,3"
        2. join()
            作用 ：将数组中的元素连接成一个字符串并返回
            返回值 ：字符串
            参数 ：可选，如果省略参数，默认元素之间使用,连接。
                可以给参数，指定元素之间的连接符
        3. reverse()
            作用 ：反转数组元素
            返回值 ：数组，会改变数组的原有结构
            et :
                var arr = [10,20,30];
                //[30,20,10]
                console.log(arr.reverse());
        4. sort()
            作用 ：对数组中元素进行排序
            返回值 ：数组，会改变数组原有结构
            参数 ：可选，自定义排序函数，
                   默认按照元素的Unicode码升序排列
            1. 升序的排序函数
                function sortAsc(a,b){
                    return a-b;
                }
                arr.sort(sortAsc);
                解释 ：
                1. sortAsc函数接收两个参数，
                    会自动将数组中相邻的两个元素传递给参数
                2. 如果返回值>0，交换两个元素的位置，否则不变
            2. 匿名函数作为排序函数，直接写在（）中
                    arr.sort(function (a,b){ return b-a;});


    7. 数组的进出栈操作
		栈结构 ：遵循先进后出原则
		栈操作可以快速操作数组中的头尾元素
		1. push(data)
				入栈操作，向数组的尾部添加元素，可以是一个或多个
				返回值 ：返回新数组的长度
				 et :
						arr[arr.length] = 'hello';
						arr.push("Hi");
						arr.push(10,20); //多个数据之间只用,隔开
		2. pop()
				出栈操作，删除数组尾部元素
				返回值 ：返回被删除的元素
		3. unshift()
				向数组头部添加一个或多个元素
				返回最终数组的长度
		4. shift()
				删除数组中头部元素
				返回被删除的元素
                无参数

   练习 ：随意录入一个数字，将数字转换成对应的二进制
            并输出
            10  转换二进制 ：除2取余,倒序排列余数
            10  / 2 = 5 .....0
            5   / 2	= 2 .....1
            2	/ 2 = 1 .....0
            1	/ 2 = 0 .....1
            10的二进制 1010  
            0 * 2（0）+ 1 * 2（1）+ 0 * 2（2） + 1 * 2（3）

    8.二维数组
        1.数组中每个元素又都是数组
            语法：
                一维数组：[10,20,30]
                二维数组：[[1,2,3],[4,5,6],[7,8,9]]
         2.访问：
            语法：
                一维数组访问:arr[0];
                二维数组访问：arr[0][0];访问第一个内层数组中下标为0的元素

     练习：
        声明数组包含若干数字，接受用户输入的数字。遍历数组，查找数据，如果数组存在相应的数据，
        返回下标不存在，返回-1并提示
    