前情回顾
1. httpserver （http协议 + tcp套接字）
    * 接收浏览器发来的请求 （HTTP请求）
    * 查看请求内容
    * 组织http响应子串
    * 将内容发送给浏览器显示

2. IO 形态
    阻塞IO ： 默认IO 遇到条件阻塞或者传输阻塞会暂停程序运行。效率低

    非阻塞IO ：设置属性或者设置超时检测
                效率提升
    
    IO多路复用 
	目的 ： 在程序中有多个 IO事件的时候，同时监控，哪个能够执行就执行哪个，提高效率
	方法 ： select  poll
	      设置要监控的io。阻塞等待IO事件发生。哪个发生就处理哪个IO
*************************************************************************
poll实现IO多路复用
　from select  import  poll

　1. 创建poll对象
    p = select.poll()  
    功能：创建poll对象
    返回值：poll对象
  2. 添加关注的IO
    p.register(fd,event)
    功能：注册要关注的IO事件
    参数： fd 要关注的IO对象
    event 选择要关注的事件
    　常用事件类型：POLLIN 　读IO事件　rlist
                POLLOUT   写IO事件　wlist
                POLLERR   出错IO　　xlist
                POLLHUP   连接断开事件
    p.register(sockfd,POLLIN|POLLERR)
    
    p.unregister(s)    
    功能：取消对IO的关注
    参数：IO对象或者是文件描述符

3. 进行监控
    events = p.poll()
    功能 ： 阻塞等待监控IO事件发生
    返回值 ： events是一个列表，列表中每个元素为一个元组，代表准备就绪需要处理的IO
    events --》 [(fileno,event),(),()]
                其中每个元组为一个就绪的IO事件
                元组中有该IO的fileno和就绪的事件就绪

    因为要获取IO对象调用函数---》需要字典配合通过fileno查找对应的IO事件对象
实施方法 ： 建立比照字典 {fileno:io_obj}  {sockfd.fileno():sockfd}

poll_server步骤
    １、创建套接字
    ２、将套接字设置为关注
    ３、创建查找字典，并维护
    ４、循环监控IO发生
    ５、处理发生的IO事件
示例见：
    poll_server.py


epoll
    使用方法 ： 与poll基本相同
    * 生成对象使用epoll() 而不是poll() 
    * register注册IO事件事件类型改为epoll事件类型

select   poll   epoll 区别
    1. select可以很好支持windows
    2. epoll比select和poll效率高，select和poll差不多
    3. epoll提供了更多的触发方式　(边缘触发)
    4. epoll的监控数量比select要多

发送更丰富的数据结构
　struct模块　结构化数据
    原理：将数据转换为bytesg格式，并且可以将bytes格式数据转换回来

　struct(fmt)
    功能：生产struct对象
    参数：fmt  定制的数据结构组成
    示例：　
    　要发送的数据:1b'zhang'1.75
      组织的类型格式：Struct('i5sf')
      python类型      fmt
      int             i
      float           f
      bytes           ns(n代表有几个字符)
    返回:struct对象
    
    st.pack(v1,v2,v3...)
    功能：将数据按照指定格式打包转换为bytes
    参数：要发送的数据
    返回值：打包后bytes字串
    示例：st.pack(1,b'zhang',1.75)

    st.unpack(bytes_data)
    功能：将bytes字串解析为指定格式数据
    参数：要解析的bytes字串
    返回值：元组，为解析后的内容
  *struct 模块可以直接调用pack(),unpack(),此时两个函数第一参数为fmt
    struct.pack('i5sf',1,b'zhang',1.75)


本地套接字
    功能 ： 用于本地不同程序间进行通信

    本地套接字创建流程：
    1. 创建套接字对象
     sockfd = socket(AF_UNIX,SOCK_STREAM)

    2. 绑定本地套接字文件
     sockfd.bind(path)  
     path ： 一个文件

    3. 监听
     listen()
    4. 接受发送消息
     send recv
     cookie
    示例：　
        unix_send.py
        unix_recv.py

os.path.exists(path)
功能 ： 判断一个文件夹下是否有某个文件

In [4]: os.path.exists('./tcp_client.py')
Out[4]: True

os.unlink(path)   os.remove(path)
功能 ： 删除一个文件


多任务编程
    意义 ： 充分利用计算机的资源提高程序的运行效率
    定义 ： 通过一定的编程手段，在一个程序运行中可以同时利用计算机执行多个任务，以此提高程序运行效率。
    实施方案 ： 多进程   多线程


    并行 ： 多个任务利用计算机多核在同时执行，此时多个任务间为并行关系

    并发 ： 同时处理多个任务，内核在任务间不断的切换达到好像多个任务均被同等执行的
            效果。实际每个时刻只有一个任务占有内核

进程(process)： 
    定义：程序在计算机中的一次过运行程
    程序 ： 是一个可执行文件，是静态的，占有磁盘空间，不占有运行资源
    进程 ： 进程是一个动态的过程，占有cpu内存等计算机资源的，有一定的生命周期

    * 同一个程序的不同执行过程是不同的进程，因为分配的计算机资源等均不同

    进程的创建流程
    1.用户空间通过调用程序接口或者命令发起进程创建请求
    2.操作系统接受用户请求，开启进程创建
    3.操作系统分配计算机资源，确认进程状态，开辟空间等
    4.操作系统将创建好的进程提供给用户使用

    cpu时间片 
    　　如果一个进程占有cpu内核，我们称这个进程在cpu时间片上。
    　　多个任务实际对cpu会进行争夺，一般由操作系统分配cpu时间片

    PCB（进程控制块）
    　  在内存中开辟的一块空间存放进程的基本信息

    进程信息 ： 进程PID ,进程占有的内存位置，创建时间，用户......

    进程 PID(IP) : 系统为进程分配的ID号，每个进程不重复，大于0整数，由系统自动分配
        进程信息查看命令 ：   ps  -aux
        示例：　while.py

    父子进程：系统中每一个进程都有唯一的父进程，可以有多个或者０个子进程，这样形成父子进程关系
        查看命令：　pstree

    进程的状态
      三态
        * 就绪态：进程具备执行条件，等待系统分配cpu资源
        * 运行态：进程占有cpu时间片，处于运行状态
        * 等待态：进程暂时阻塞不具备运行条件

      五态 （增加新建态和终止态）
        * 新建态 ： 创建一个新的进程，获取资源的过程
        * 终止态 ： 进程结束释放资源的过程

      　ps -aux   ---> STAT 查看进程状态
    
         D  等待态   （不可中断等待）
         S  等待态   （可中断等待）
         T  等待态   （暂停状态）
         R  运行态   （就绪态  运行态）
         Z  僵尸态
    进程优先级
        作用：决定进程的优先权限和占有资源的优先程度
        查看命令：　top　动态查看进程优先级

        inux优先级范围：　－２０－－１９　数字越小优先级越高
        指定优先级运行程序：
            nice -9 python3 while.py 以９的优先级运行
            nice -－9 python3 while.py 以－９的优先级运行

         +  前台进程
         <  高优先级
         N  低优先级
         l  有链接子进程的
         s  会话组组长

    进程特征 
    * 进程可以使用计算机的多核资源
    * 进程是计算机分配系统资源的最小单位
    * 每个进程都有自己单独的虚拟内存空间
    * 进程间的执行相互独立，互不影响

要求：
    １、什么是进程，进程和程序的区别
    ２、进程的特征有那些
    ３、进程都有那些状态，各种状态如何转换

多进程编程
    import os
    pid = os.fork()
    功能 ： 创建一个新的进程
    参数： 无
    返回值： 失败返回一个负数   -1
            成功    在原有进程中返回新的进程的PID号
            在新的进程中返回0
fork.py
    * 子进程会复制父进程全部代码段和内存空间，包括fork前的代码
    * 子进程从fork的下一句开始执行
    * 父子进程通常会根据fork返回值的差异选择执行不同的代码 （使用if结构）
    * 父子进程在执行上互不干扰，执行顺序不确定
    * 子进程虽然复制父进程内存空间，但是有自己的特性，比如PID号，PCB，命令集等
    * 父子进程空间独立，各自修改各自的内容，互不影响
作业：对进程中要求的理论问题总结
    整理网络编程知识点，回顾重点程序

    写一个聊天室

    功能 ： 类似qq群聊
    1. 进入聊天室需要输入用户名
    2. 有人进入聊天室 其他人会收到提示
    xxx 进入聊天室
    3. 某人发消息，则其他人都能收到
    xxx 说： xxxxxxxxx
    4. 有人退出聊天室 其他人会收到提示
    xxx 退出了聊天室

    服务端  客户端
    * 整体实现方案
    * 用什么技术



