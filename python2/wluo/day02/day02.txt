前情回顾

１、osi七层模型　　tcp/ip模型
２、三次握手和四次挥手
３、tcp和udp的区别
网络概念：主机　　端口　　　ip    域名
套接字：网络编程方式
    流式套接字　　tcp 
    数据报套接字    udp
流式套接字服务端
socket()--->bind()-->listen()-->accept()-->recv()、send()--->close()
客户端
socket()-->connect()-->send()/recv()-->close()




tcp套接字传输特征
　　１、当一端退出时如果另一端阻塞在recv，此是recv会立即结束阻塞返回空字串
    ２.如果另一端不存在还试图使用send进行发送则会产生BrokenPipeError异常
    3、一个监听套接字可以同时连接多个客户端，也可以重复使用

网络收发缓冲区
    *缓冲区的功能 ： 协调收发速度（数据处理速度），减少和磁盘交互
    recv和send实际上是从缓冲区内接受内容，和向缓冲区发送内容

tcp粘包
    产生原因：tcp传输采用字节流的方式，消息之间没有边界，如果发送和接受速度不匹配，
            会造成多次发送的内容被一次接受，形成意义上的误解即粘包
    产生条件 ： 当使用send快速的连续发送极有可能产生粘包。

影响： 如果每次发送的内容代表一个独立含义的个体，此时粘包会产生影响。

如何处理 ： 
1. 在消息结尾添加结束标志
2. 将消息结构化
3. 控制消息发送速度



基于udp套接字的通信

服务端
    1. 创建套接字 ---》 数据报套接字
      sockfd = socket(AF_INET,SOCK_DGRAM)

    2. 绑定服务端地址
      sockfd.bind(addr))

    3. 消息的收发
      data,addr = socket.recvfrom(buffersize)
      功能 ： 接受udp消息
      参数 ： 每次最多接收消息的大小
      返回值 ： data  接收到的消息
            addr  消息发送者的地址
  
      n=socket.sendto(data,addr)
      功能： udp发送消息
      参数： data要发送的消息   bytes格式
          addr 目标地址
      返回值 ： 发送的字节数

    4.关闭套接字
    　　sockfd.close()

udp客户端
    1. 创建数据报套接字
    2. 消息收发
    3. 关闭套接字

cookie 
    import sys
    sys.argv：获取来自命令行的内容
    * 以空格作为每一项分隔，如果一项中有空格则用引号表示一个整体
    * 将命令行参数以字符串形式收集为一个列表

tcp流式套接字 和 udp数据报套接字 区别
1. 流式套接字采用字节流的方式传输数据，而数据报套接字以数据报形式传输
2. tcp会产生粘包现象，udp消息是有边界的不会粘
3. tcp传输是建立在连接的基础上，保证传输的可靠性 ，而udp一次接受一个数据报，不保证完整性
4. tcp需要依赖listen accept建立连接，udp不用
5. tcp 收发消息使用recv send udp用recvfrom sendto

补充函数：
    sendall()
    功能 ： 同send() 作为tcp消息发送
    参数 ： 同send()
    返回值 ： 发送成功返回None ，发送失败返回异常

socket模块和套接字属性   
    s=socket.socket()   （s表示一个套接字对象）
    s.type  :  获取套接字类型
    s.family : 获取地址族类型

    s.fileno()
    功能 ： 获取套接字的文件描述符
    文件描述符 ：每一个IO操作系统都会为其分配一个不同的正整数作为编号，该正整数即为此IO操作的文件描述符。 
    *文件描述符表示系统识别ＩＯ的标志

    s.getsockname()
    功能 ： 获取套接字绑定地址

    s.getpeername()
    功能 ： 获取连接套接字另一端的地址

    s.setsockopt(level,optname,value)
    功能：设置套接字选项  丰富修改原有套接字属性功能
    参数： level ： 获取选项的类型         SOL_SOCKET
        optname ： 每个选项类型中的子选项
        value :  为选项设置值
    *创建套接字后立即设置
       
    s.getsockopt(level,optname)
    功能 ： 获取套接字选项的值
    参数：level  选项类别
         option 每个选项类别对应的子选项
    返回值：获取到的选项值
    示例：
        sock_attr.py

udp套接字应用之广播
    一点发送多点接收
    目标地址 ： 广播地址，每个网段内最大的地址
    172.60.50.255   ----》 <broadcast>
    示例：  broadcast_recv.py

    cookie 
        format()
        功能：合成字符串
        s='{} is a {}'.format('w','d')

tcp应用之HTTP传输
    http协议 ---》 超文本传输协议   应用层协议
    用途 ： 网页的获取，基于网站的数据传输
        基于http协议的数据传输

    特点： 
        1. 应用层协议，传输层使用tcp传输
        2. 简单灵活，很多语言都有http专门接口
        3. 无状态协议，不记录用户的通信内容
        4. 成熟稳定 http1.1 　支持持久连接
    网页请求过程：
        １、客户端（浏览器）通过tcp传输发送http请求给服务端
        ２、服务端接收到http请求后进行解析
        ３、服务端处理具体请求内容，组织响应内容
        ４、将响应内容以http响应格式回发给浏览器
        ５、浏览器接收响应内容解析展示

    http请求　　request
        请求格式
            请求行：具体的请求类别和请求路径
            　格式：  GET      /  　　HTTP/1.1
                　　请求类别　请求内容　协议版本
                请求类别
                  GET　：　获取网络资源
                  POST　：提交一定的信息，得到反馈
                  HEAD　：只获取响应头
                  PUT　：更新服务器资源
                  DELETE　：删除服务器资源
                  CONNECT
                  TRACE　：测试
                  OPTIONS　：获取服务器性能信息
            请求头：对请求内容的基本描述
            （空行）
            请求体：请求参数或者提交内容
        
    http响应


作业 ：  使用tcp完成一个文件的传输，要求可以传输文本文件也可以传输图片
        从客户端发给服务端，或者从服务端发给客户端均可
	 
	 了解http协议更多的内容























