1.网络编程
2.进程线程
3.正则表达式
4.monggodb数据库
5.git使用
6.项目

网络编程
    网络功能:数据的传输
    
    ISO(国际标准化组织)
    
    OSI七层模型---> 网络通信工作流程标准化
    
        应用层：    提供用户服务，具体功能有具体程序体现
        表示层:     数据的压缩优化加密
        会话层：    建立应用级的链接，选择适当的传输服务
        传输层：    提供传输服务，流量控制
        网络层：    路由选择，网络互联
        链路层：    进行数据交换，控制具体消息的发送链路连接（真正进行传输）
        物理层：    提供了数据传输的硬件保证，网卡，接口设置，传输介质
    
    OSI　七层模型优点：1.建立类统一的工作流程
                    2.分步清晰每步各司其职
                    3.降低了通讯模块的耦合度
    
        
    cookie：
        高内聚：模块的功能性单一，不要相互掺杂
        低耦合：模块之间的关联影响尽量小
    
    四层模型（TCP/IP)
        应用层，传输层，网络层，物理链路层
    
    五层模型
    应用层，传输层，网络层，链路层，物理层
    
    数据的传输流程
        1.发送端由应用层到物理层逐层添加首部信息，最终在物理层发送消息包
        2.发送的消息中间经过多个结点传送（路由基站交换机等）最终到达目标主机
        ３．目标主机逐层解析消息包，最终由应用层层现数据信息
    协议（网络协议）
        在网络通信中，各方必须遵守的规定。包括建立什么样的连接，消息结构等
    
网络编程概念
    网络主机： 在网络中标示一台计算机　host
    　　本地： 'localhost'
              '127.0.01'
    网络使用：　'0.0.0.0'       
              '176.47.2.225' (终端输入ifconfig)
    ifconfig：查看本机的ＩＰ信息
    获取计算机名：
        In [2]: socket.gethostname()
        Out[2]: 'tedu'
    获取主机IP
        In [5]: socket.gethostbyname('localhost')
        Out[5]: '127.0.0.1'
    IP地址
        在网络上确定一台主机的网络路由位置

    IPv4 ： 点分十进制    e.g.  192.168.1.72   0-255
            32位二进制表示 
    IPv6 ： 128
    ping  ip : 连接测试命令　　 ping　176.47.2.225
    特殊IP
        127.0.0.1   本地测试IP
        0.0.0.0    使用本机能够使用的网卡地址
        192.168.56.0  表达一个网段
        192.168.56.0　　通常标示网关地址
        192.168.56.255  广播地址
    域名 ： 网络服务器IP地址的名称 
        １、方便记忆
        ２、表达一定的含义
    端口号 ： port
        端口号是网络地址的一部分，用于区分网络主机上不同的网络应用程序，
        *在一个系统中应用监听的端口号不能重复

        取值范围 ： 1--65535

        1--255 ： 一些众所周知的公共程序端口
        256--1023 ： 系统应用端口
        1024---65535 ： 自用端口 
        推荐  >10000   8888   9999   7777   6666
    获取一个端口：socket.getservbyname('mysql')

传输层服务
    面向连接的传输服务 ---》 基于tcp协议的数据传输
    传输特征：
        * 提供可靠的传输服务
            可靠性表现： 数据在传输过程中，无失序，无差错，无重复，无丢失
    实现手段：
        在通信前需要建立数据连接，通信结束要正常端口连接

        * 传输过程中有建立和断开连接的过程
            三次握手：建立数据传输两端的持续连接
            1. 客户端向服务器发送连接标志变量表示请求连接
            2. 服务器收到连接请求后，回复变量标志确定可连接
            3. 客户端收到回复，发送最终连接标志建立连接

            四次挥手：断开连接的两端，保证数据的传输完整
            1.主动方发送报文，告知被动方要断开连接
            2.被动方收到请求后立即回复信息表示已经接受请求
            3.被动方消息处理完毕再次发送标志表示已经准备可以断开
            4.主动方收到被动方标志，发送最终断开标识，连接断开

    适用情况：对数据准确性有明确要求，传输数据文件较大，需要确保可靠性传输的情况
    比如 ： 信息聊天，文件上传下载，邮件，网页获取

    面向无连接的传输服务 ---》 基于udp协议的传输

    传输特征 ：
        * 不保证传输的可靠性
        * 无需建立三次握手和四次挥手的连接断开过程
        * 消息的收发比较自由，不受其他约束

        适用情况 ： 网络情况较差，对传输可靠性要求不高，使用tcp效率较低
        比如 ：网络视频，群聊，发送广播

    问题总结 ：
        1. osi七层模型介绍一下，tcp/ip模型是什么
        2. 三次握手和四次挥手是什么，过程是怎样的
        3. tcp服务和udp服务有什么异同

socket模块
    套接字：实现网络编程，进行数据传输的一种技术手段
    目的 ： 使用socket模块提供的接口函数进行组合搭配，完成网络套接字编程

    套接字的分类：
        流式套接字（SOCK_STREAM）: 传输层基于tcp的协议进行通信
        数据报套接字（SOCK_DGRAM）： 传输层基于udp的协议进行通信

        面向连接－－tcp协议--可靠的－－流式套接字
        无连接－－udp协议－－不可靠－－数据报套接字

TCP套接字编程
    import  socket

    1. 创建套接字

        sockfd=socket.socket(socket_family = AF_INET,
                            socket_type = SOCK_STREAM,
                            proto = 0)
    功能：创建一个套接字
    参数： socket_family   选择地址族类型  AF_INET 表示IPv4
          socket_type     选择套接字类型  SOCK_STREAM 流式
                                        SOCK_DGRAM  数据报
          proto          通常为0 （表示选择子协议）
    返回值： 返回一个套接字对象

    2. 绑定IP端口
        sockfd.bind(addr)
        功能 ： 绑定本机的网络地址（IP和端口）
        参数： 二元元组，第一项为ip 第二项为端口号　(ip,port) ("192.168.1.2",8888)

    3. 将套接字设置为可监听
        sockfd.listen(n)
        功能：将套接字设置为监听套接字，并设置监听队列
        参数： n 设置监听队列的大小   n为大于0 的正整数

    4. 等待处理客户端的连接请求
        connfd,addr = sockfd.accept()
        功能： 阻塞等待处理客户端请求
        返回值 ：connfd  连接的客户端的连接套接字
                addr    连接的客户端的地址

    * 阻塞函数： 程序运行过程中遇到阻塞函数则暂停执行，直到达成某种条件后再继续执行

    5.消息收发
        data = connfd.recv(buffersize)
        功能 ： 接收消息
        参数 ： 每次最多接收多少字节消息  bytes
        返回值 ： 接收到的网络消息    decode()

        n = connfd.send(data)
        功能 ： 发送消息
        参数 ： 要发送的内容  必须是bytes格式   encode()
        返回值 ： 实际发送的字节数

    6.关闭套接字
    sockfd.close()
    功能 ： 关闭套接字，tcp连接断开

    * telnet  ip   port   表示连接tcp服务端
客户端
    １、创建套接字
        *只有相同类型套接字才能进行连接传输
    ２、请求连接
        sockfd.connect(server_addr)
        功能：连接服务器
        参数：服务器地址，元组
    ３、收发消息
        防止两端都阻塞，收发函数使用要配合
    ４、关闭套接字

作业 ： 
1. 口述三个问题
2. 将tcp服务端和客户端改写为可以循环收发的模式，当发送##时两端都退出
3. 当客户端退出后，服务端可以继续等待连接其他客户端，进行操作









