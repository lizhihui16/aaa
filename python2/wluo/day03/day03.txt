前情回顾
１、tcp传输的一些问题
    *传输特征
    *网络缓冲区
    *粘包

２、ＵＤＰ传输
    服务端　　创建套接字－－－》绑定地址－－－》发送接收
    客户端　　创建套接字－－》收发消息
３、套接字属性
　　fileno()
    getpeername()
    setsockopt()
4、广播
５、http协议传输
    获取一个网页的流程
    HTTP的请求：
    　请求行
    　请求头
    　空行
    　请求提
    请求类型
*********************************************************
http响应  (response)
响应格式
　　响应行：反馈基本的响应情况
　　　格式：HTTP/1.1    200    OK
           版本　　　　响应码　附加信息
    　响应码： 1××　提示信息，表示请求被接收
        　　　２××　响应成功
        　　　３××　响应需要进一步操作，重定向
        　　　４××　客户端错误
        　　　５××　服务器错误
        常见：200 成功
             404 访问内容不存在
             401 没有访问权限
             500 服务器未知异常
　　响应头：对响应内容的描述
　　　　　Cache-Control: private
　　　　　Connection: Keep-Alive
　　　　　Content-Encoding: gzip
　　　　　Content-Type: text/html
　　空行
　　响应体：具体的响应内容

IO input  output
在内存中存在数据交互的操作认为是IO操作

和终端交互：input print
和磁盘交互：read  write
和网络交互：recv  send

IO密集型程序：在程序执行中有大量的IO操作，而cpu运算较少。
            　消耗cpu资源少，耗时长。

计算密集型程序：程序中计算较多，ＩＯ操作较少。cpu消耗较多，运算速度快
（cpu密集型）

IO的类型
　阻塞IO   非阻塞IO   IO多路复用   事件IO   异步IO
　阻塞IO ： 阻塞IO是IO的默认形态,是效率很低的一种IO情形
　  阻塞情况 ： * 因为某种条件没有达到造成的函数阻塞
                e.g.   input   accept   recv	     
	        　* 处理IO事件的时间较长产生的阻塞行为
                e.g. 文件的读写过程，网络数据发送过程

  非阻塞IO : 将原本的阻塞函数通过属性的修改使其变为非阻塞状态，即避免条件阻塞的情况
设置套接字为非阻塞
    s.setblocking(bool))
    功能 ： 将套接字设置为非阻塞状态
    参数 ： 默认Ｔｒｕｅ表示套接字调用阻塞函数时为阻塞状态，设置为False则套接字调用函数为非阻塞
    示例：block_test.py

　  * 非阻塞IO往往和循环搭配使用，不断执行任务，然后再检测IO行为是否满足运行条件


超时检测，即设置一个最长阻塞等待时间，超过时间后则不再阻塞
    s.settimeout(sec)
    功能 ： 设置套接字超时时间
    参数 ： 设置的时间
     注意：设置超时检测一定是在阻塞状态下
示例：block_test.py


IO多路复用
　　定义 ： 同时监控多个IO事件，当哪个IO事件准备就绪就执行哪个IO事件。 此时形成可以同时操作
        多个IO的行为，避免一个IO阻塞造成其他的都无法运行，提高了执行效率
　　准备就绪 ： IO事件即将发生的临界状态

    具体方案：
    　１、系统支持：
        select   ---》 windows   linux  unix
        poll  ---》 linux   unix
        epoll ---》 linux   unix
    　２、python模块
        import select 
    select方法实现多路复用
        r, w, x = select(rlist, wlist, xlist[, timeout])
        功能： 监控IO事件，阻塞等待IO发生
        参数： rlist  列表  存放被动等待处理的IO事件
              wlist  列表  存放需要主动处理的IO
              xlist  列表  存入如果发生异常需要处理的IO
              timeout  超时时间,默认为阻塞设置超时后即阻塞一定的时间
        返回值:  r   列表   rlist中准备就绪的IO
                w   列表   wlist中准备就绪的IO
                x   列表   xlist中准备就绪的IO
    示例：select_server.py
    基于select IO多路复用的tcp服务端
    　步骤： １、将关注的ＩＯ放入对应类别的关注列表
        　　 2、通过select函数进行监控
            ３、遍历select返回值确定那个IO事件发生
            ４、处理发生的IO事件
    　注意：wlist中如果存在IO事件select会立即返回让你处理
          在处理IO过程中不要出现死循环等长期占有服务端的情况
          IO多路复用占有计算机资源比较少，效率比较高

位运算
  & 　按位与
  |　按位或
  ^  按位异或
  << 左移
  >> 右移
  11  　　1011
  14  　　1110
  11&14 　1010  10  一０则０
  11｜14  1111  15　一１则１
  11^14   0101  5　相同为０不同为１
  11 << 2  101100  向左移动两位右侧补０　　44
  11 >> 2  11   向右移动挤掉低位

作业：１、熟悉select服务端程序
    　２、复习记忆http协议格式和各部分功能
    　３、复习类（继承　super __init__)　