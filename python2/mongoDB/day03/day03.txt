修改器的使用
    db.collection.update(query,update,upsert，multi)

    $set:修改一个域的值，或者增加一个域
        e.g.  当一个域不存在时可以增加一个域
            db.class0.update({name:'Jame'},{$set:{sex:'m'}})

    $unset:删除一个域
    　  e.g.   删除一个文档sex域
            db.class0.update({name:'zhi'},{$unset:{sex:''}})

    $rename:修改一个域的域名
        e.g.　　修改sex域名为gender
            db.class0.updateMany({},{$rename:{sex:'gender'}})

    $setOnInsert:当update插入文档时，作为补冲插入内容
        e.g.插入新的文档时，gender:'w'也会作为文档的域
            db.class0.update({name:'sa'},{$set:{age:16},$setOnInsert:{gender:'w'}},true)

    $inc 加法修改器
        e.g. 所有人的age域值加1
            db.class0.updateMany({},{$inc:{age:1}})

    $mul:乘法修改器
        e.g.将所有age域的值乘以２
            db.class0.updateMany({},{$mul:{age:2}})

        *$inc   $mul值可以是整数　小数，正数　负数

    $max:指定某个域的值如果小于规定值则改为规定值，大于规定值则不变
    e.g.如果Alex  age小于１８则改为１８，大于１８则不变
        db.class0.update({name:'Alex'},{$max:{age:18}})
        
    $min:指定某个域的值如果大于规定值则改为规定值，小于规定值则不变
    e.g.如果zhi大于21则改为21，小于21不变
        db.class0.update({name:'zhi'},{$min:{age:21}})

数组修改器
    $push:向数组中添加一项
    e.g. 向score数组中增加55
        db.class3.update({name:'小明'},{$push:{score:55}})

    $pushll:向数组中增加多项
    e.g.
        db.class3.update({name:'小红'},{$pushAll:{score:[60,100,79]}})

    $pull:从数组中删除一项
    e.g.删除score中的所有７９
        db.class3.update({name:'小红'},{$pull:{score:79}})

    $pullAll:同时删除数组的多个值
    e.g. 同时删除score中多个值
        db.class3.update({name:'小红'},{$pullAll:{score:[60,82]}})

    $pop：弹出数组一项
    e.g. 　从数组中弹出一项　　１表示最后一项，－１表示第一项
        db.class3.update({name:'小明'},{$pop:{score:1}})

    $addToSet:向数组中添加一项，但是不能添加数组中已有数值
    e.g.如果score中没有88则添加，如果有则添加不上
        db.class3.update({name:'小红'},{$addToSet:{score:92}})

    $each:对多个值进行逐一操作
    e.g.利用each同时添加９２　　６６到数组
        db.class3.update({name:'小明'},{$push:{score:{$each:[92,66]}}})

    $position : 指定位置插入数值　　搭配each使用
    e.g.
        db.class3.update({name:'小明'},{$push:{score:{$each:[99],$position:1}}})

    $sort:对数值进行排序，搭配each使用
    e.g.对数值进行升序
        db.class3.update({name:'小亮'},{$push:{score:{$each:[],$sort:1}}})

时间类型

    获取当前时间：
        方法1 ：  new Date()   自动生成当前时间
        e.g. 
        db.class1.insert({book:'python入门',date:new Date()})

        方法2 ： ISODate()  自动生成当前时间
        e.g. 
        db.class1.insert({book:'python入门',date:new ISODate()})

        方法3  Date()  获取系统时间生成时间字符串
        e.g. 
        db.class1.insert({book:'python疯狂',date:Date()})
    获取任意时间:
        ISODate()　
        功能 ： 将制定的时间转换为MongoDB的存储时间类型
        参数 ： 指定时间
                "2018-07-01 12:10:56"
                "20180701 12:10:56"
                "20180701"
        e.g. 
        db.class1.insert({book:'Python崩溃',date:ISODate("2018-07-01 01:12:12")})

    时间戳
        valueOf():将标准时间转换为时间戳
        e.g.记录当前标准时间的时间戳
        db.class1.insert({book:'python放生',date:ISODate().valueOf()})

Null  ----》 null
    值：null
    1. 如果某个域存在却没有值，可以设置为null
    e.g.  price 域的值为空
    db.class1.insert({book:'python涅槃',price:null})

    2. 如果某个域不存在可以使用null匹配
    e.g.  找到gender域不存在的文档(或者gender域值为null)
    db.class0.find({gender:null},{_id:0})

Object 内部文档
    文档内某个域的值还是一个文档，则这个文档为内部文档
    * 当使用内部文档某个域的值时，可以使用外部文档 . 内部文档方法引用。但是注意此时需要加引号
    e.g.
    db.class4.find({'book2.title':'python Web'},{_id:0})

    e.g. 
    db.class.update({'book.title':'骆驼祥子'},{$set:{'book.price':46.5}})

数组的下标引用
    通过数组下标直接引用数组项
    * 使用数组时，可以使用数组域 . 数组序列下标的方式引用数组的具体某一项进行操作

    e.g. 
    db.class3.find({'score.0':{$gt:70}},{_id:0})

    e.g.
    db.class3.update({name:'小明'},{$set:{'score.0':100}})


查找结果的有序性

即可以对find的查找结果使用[]的方式引用具体某一条

e.g.
db.class1.find({},{_id:0})[1]

练习 ： 
使用之前的grade数据库

1. 将李红年龄修改为９岁，兴趣爱好变为跳舞画画
 db.class.update({name:'李红'},{$set:{age:9,hobby:['hobby','sing']}})

2. 追加小明兴趣爱好 唱歌
 {$push:{hobby:'sing'}}

3. 追加小王兴趣爱好，吹牛，打篮球
{$pushAll:{hobby:['chuiniu','basketball']}}

4. 小李兴趣多了跑步唱歌，但是要确保和之前的不重复
{$addToSet:{hobby:{$each:['running','sing']}}}

5. 班级所有人年龄加1
 db.class.updateMany({},{$inc:{age:1}})

6. 删除小明的sex属性
{$unset:{sex:''}}

7. 删除小李的第一个爱好 
{$pop:{hobby:-1}}

8. 删除小红的兴趣画画和唱歌
{$pullAll:{hobby:['draw','sing']}}

9.为小王增加一个域　　备注：｛民族：‘回族’，习俗：‘不吃猪肉’｝
update({name:'小王'}},{$set:{备注：{民族：'回族'，习俗：'不吃猪肉'}})

１０．在小王的备注中增加一项　　宗教：‘伊斯兰教’
{$set:{'备注。宗教':'伊斯兰教'}}

索引
    索引是建立文档所在位置的查找清单，使用索引可以方便我们快速查找，减少遍历次数，提高查找效率。

    索引约束
        １、索引本身也占有数据库空间，所以当数据很小的时候这种消耗是没有必要的
        ２、索引表需要根据数据的修改及时修改，否则索引就会不和内容配套，也就失去了意义。
            因此如果上课查找是频繁的修改操作而不是查找操作则不适合创建索引


mongodb创建索引
    db.collection.createIndex()
        功能 ： 创建索引
        参数 ： 索引域和选项        

        e.g.  根据name 创建索引
        db.class1.createIndex({name:1})

    查看一个集合中的索引
        db.class1.getIndexes()

    * _id是系统自动创建的索引
    * 1表示正向索引 -1逆序

自定义索引名称
    e.g. 通过索引选项name定义索引名称
    db.class0.createIndex({age:1},{name:'ageIndex'})

其他创建索引方法
    ensureIndex()
        功能：创建索引
        参数：同createIndex()
    db.class0.ensureIndex({book:1})

    createIndexes([{},{}])
        功能：同时创建多个索引
        参数：数组中存入创建索引键值对
    e.g. 创建name和score两个域的索引
    db.class3.createIndexes([{name:1},{score:-1}])

删除索引
    dropIndex()
    功能 ： 删除索引
    参数 ： 要删除的索引，可以是索引名称或者索引键值对

    e.g.   db.class3.dropIndex('name')
    e.g.   db.class3.dropIndex({score:-1})

    dropIndexes()
    删除集合中的所有索引（除了_id）

    e.g. db.class0.dropIndexes()

索引类型
    复合索引:根据多个域创建一个索引

    e.g. 
    db.class0.ensureIndex({name:1,age:-1})

    数组和子文档索引
        如果对某个域创建索引，值为数组或者子文档，则对数组中某一项或者子文档中某个域的查找也是索引查找
        e.g.  对bool创建索引后，该查找也为索引查找
        db.class2.find({"book.title","围城"})

    唯一索引：创建索引的域的值均不重复
        e.g.对name域创建唯一索引
        db.class0.createIndex({name:-1},{unique:true})

    稀疏索引（间隙索引）：会在创建索引时忽略没有指定域的文档
        只针对有指定域的文档创建索引表，如果某个文档没有该域则不做索引处理

        e.g.  创建age域的稀疏索引
        db.class0.createIndex({gender:1},{sparse:true})

聚合操作
    对文档进行数据整理和统计

    db.collection.aggregate()
    功能 ： 完成聚合操作
    参数 ： 聚合条件 需要配合 聚合操作符使用

聚合操作符
$group  分组聚合  需要配合一定的统计操作符使用
      
      $sum  ： 求和 
      
    e.g. 按照gender域的值分组，统计结果叫num,方法为加和
      db.class0.aggregate({$group:{_id:'$gender',num:{$sum:1}}})
    e.g. 统计所有男生、女生的年龄之和
    　db.class0.aggregate({$group:{_id:'$gender',num:{$sum:'$age'}}})


    $avg   求平均
        e.g.  按照性别分组，求平均年龄
        db.class0.aggregate({$group:{_id:'$gender',num:{$avg:'$age'}}})

    $max  求最大值
        e.g.  求每组年龄的最大值
        db.class0.aggregate({$group:{_id:'$gender',num:{$max:'$age'}}})

    $min  求最小值
        e.g.  求每组年龄的最小值
        db.class0.aggregate({$group:{_id:'$gender',num:{$min:'$age'}}})

    $first 求第一个数
        db.class0.aggregate({$group:{_id:'$gender',num:{$first:'$age'}}})

    $last　求最后一个数
        db.class0.aggregate({$group:{_id:'$gender',num:{$last:'$age'}}})


$project ：用于格式化的显示文档内容
    *值的用法同find中的field参数
    e.g. 
    db.class1.aggregate({$project:{_id:0,sex:0}})

    e.g.   指定显示域名
    db.class1.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}})


$match  过滤数据
    *match值的写法同find中的query参数
    e.g.  过滤年龄大于19的
    db.class0.aggregate({$match:{age:{$gt:19}}})

作业 ： 熟练mongodb增删改查操作
       熟练 索引和聚合操作