复习：

1. 数据的修改 
update(query,update,upsert,multi)

修改器 ： $set   $unset  $rename  $setOnInsert
         $inc   $mul  $max  $min 
	     $push  $pushAll  $pull  $pullAll 
	     $each  $position   $sort  $addToSet
	     $pop
   
时间类型 ： new Date()   ISODate()  Date()
            valueOf()

null : 作为一个域的值，或者表示一个域不存在

内部文档 ：通过 . 获取内部文档某个域的值

索引操作： ensureIndex（{},{}）
          dropIndex()  dropIndexes()
          getIndexes()

聚合操作

aggregate（）

聚合操作
$group   $project   $match
$sum
$avg
$max
$min
**********************************************

聚合操作
    $limit  显示前几条文档
        e.g.  获取数据的前两个文档
        db.class1.aggregate({$limit:2})

    $skip  跳过几条文档
        e.g.  跳过前两条文档显示后面内容  
        db.class1.aggregate({$skip:2})

    $sort  排序
        e.g.  按年龄升序排序
        db.class1.aggregate({$sort:{age:1}})

    聚合管道 ： 指的是将多个聚合操作合并到一起完成，将前一个聚合操作得到的结果，给后一个聚合操作继续使用
        db.collection.aggregate([{聚合1}，{聚合2}....])

        e.g. $match ---> $project  ---> $sort
        db.class1.aggregate([{$match:{sex:'m'}},{$project:{_id:0}},{$sort:{age:1}}])

        e.g.   $group  ---> $match
        db.class1.aggregate([{$group:{_id:'$name',num:{$sum:1}}},{$match:{num:{$gt:1}}}])

练习：
增加分数域  score:{chinese:88,math:76,english:76}

1.学生按照性别分组，统计每组人数
    aggregate({$group:{_id:'$sex',num:{$sum:1}}})

2.将所有男生按年龄排序，不显示_id
    db.class0.aggregate([{$match:{gender:'m'}},{$sort:{age:1}},{$project:{_id:0}}])

3. 统计每名男生的语文分数
    aggregate([{$match:{sex:'m'}},{$project:{_id:0,name:1,'score.chinese':1}}])

4. 将所有女生按照英语成绩降序排序
    aggregate([{$match:{sex:'w'}},{$sort:{'score.englisth':-1}}])

5.统计班里有名字重复的同学
    db.class0.aggregate([{$group:{_id:'$name',num:{$sum:1}}},{$match:{num:{$gt:1}}}])

固定集合
    mongodb中可以创建大小固定的集合，称之为固定集合

    特点 ： 插入速度快，顺序查找速度快
            能够淘汰早期数据
            可以控制集合大小

    使用 ： 临时缓存
            日志处理

    db.createCollection(collection,{capped:true,size:10000,max:1000})

    capped：true    表示创建固定集合
    size ： 表示集合的大小  bytes    4.0最小 4096
    max ： 表示最多存放多少文档

    e.g. 
    db.createCollection('log',{capped:true,size:1000,max:3})

文件存储

    文件存储到数据库方式

        1. 存储路径：将文件在本地的路径以字符串形式存储到数据库
            优点 ： 节省数据库空间
            缺点 ： 当数据库或者文件位置发生变化时文件丢失。

        2. 存储文件本身：以二进制方式将文件存储到数据库
            优点：数据库和文件绑定存在
            缺点 ： 占用空间大，储存效率低

    GridFS文件存储方案
        目的：更好的储存MongoDB中超过16M的大文件
        方案解释：在mongodb中一个数据库创建两个集合共同存储文件，一个储存文件信息，
                一个储存文件内容。两个集合相互配合
        
        fs.files 存储文件信息（文件名、大小）
        fs.chunks 以mongodb二进制格式储存文件内容
     
     如何存储
    mongofiles  -d  dbname   put   file
                    数据库       要存储的文件

    * 如果数据库不存在自动创建

    * 对于同一个文件 fs.files中的_id值等于 fs.chunks中的files_id值

    文件提取方法
        mongofiles  -d  dbname  get  file
    e.g. 从grid数据库中获取文件
        mongofiles -d grid get ./Na.ogg

    优缺点
        优点 ： 存储方便，提供较好的命令支持，方便数据库移动
        缺点 ： 读写效率低，不建议用来储存小文件

mongo shell对javascript支持
    在mongo shell下可以直接运行基本的js代码

    游标：获取数据库操作结果集合的量

    var  cursor = db.class1.find()　获取游标
    cursor.hasNext()  查看是否有下一个文档
    cursor.next()  通过游标获取文档内容



python操作mongodb 
pymongo模块   第三方模块

安装 
sudo  pip3  install  pymongo

操作步骤
    1. 创建mongodb数据库连接对象
        conn = pymongo.MongoClient('localhost',27017)

    2. 生成要操作的数据库对象(__getitem__ __setitem__)
        db = conn.stu 或者　db=conn['stu']

    3. 获取集合对象
        myset = db.class0 或者　myset = db['class0']

    4. 通过集合对象调用函数进行数据库操作

    5. 关闭数据库连接
        conn.close()

    插入操作
        insert()  插入一条或多条文档
        insert_many()     插入多条文档
        insert_one()　　插入一条文档
        save()　　插入一条或多条文档，当有_id域时_id域重复会替换原文档
                *pymongo中save参数是字典不能为列表

    查找操作
        cursor = myset.find()　查找所有文档
        功能：同mongo shell 中find
        返回：游标变量

    * 在pymongo中使用操作符的方法与mongo shell中相同，只需要转变为字符串格式加上引号即可
    *mongodb中　true false 使用python的True False即可，null使用python的None即可

    cursor 游标对象属性函数
        next()　　获取下一个文档
        limit()　　显示前几条文档
        skip()　　跳过前几条显示后面内容
        count()　统计计数
        sort()  排序
            pymongo:sort([('age':1),('name':-1)])
            mongo shell:sort({age:1,name:-1})
    * 当使用游标对象调用limit skip sort等函数时，要求游标对象必须为初始游标，即没有被for或next取值过

    find_one()
        功能：查找一条文档
        参数：同find
        返回： 返回一个字典

    修改操作
        update(query,updata,upsert=False,multi=False)
        update_many()
        update_one()

    删除操作
        remove(query,multi = True)
            multi默认为True表示删除所有筛选内容
            如果设置为False则表示删除一条
        delete_one()
        delete_many()
            

    复合功能函数
        find_one_and_delete()


    索引操作
        create_index()   
            功能：创建索引
            参数：域名　　默认对该域创建索引
                传入列表，列表中每个二维元祖代表一个索引项
                e.g.[(age,-1)] 表示对age创建逆向索引
        list_indexes()   查看索引
        drop_index()   删除一个索引
        drop_indexes()  删除所有索引

    聚合操作
        aggregate([])
            参数：写法和mongo shell中聚合相同
            返回值 ： 返回一个迭代游标 同find()

    文件操作
        GridFS  文件提取
            import gridfs 
            １、链接数据库,生成数据库对象
            ２、生成gridfs对象
                fs = gridfs.GridFS(db)
            ３、通过fs获取文件储存的文件集合
                flles = fd.find()
            ４、挑选想获取的文件进行读取
        GridFS文件储存
            １、连接数据库，生成数据库对象
            ２、生成gridfsｄｘ
                fs = gridfs.GridFS(db)
            ３、通过fs.put()函数将读取出来的文件内容存入数据库
                fs.put(data,filename)
            
存取小文件
    import bson.binary
    １、连接数据库，生成数据库对象和集合对象
    ２、选择要储存的文件使用rb方式读出
    ３、将读取的内容转换为mongodb的二进制格式
        content = bson.binary.Binary(data)
        功能：将bytes字串转换为mongodb二进制储存
        参数：要转换的bytes字串
        返回值：转换后的待存储数据
    ４、将内容写入文档，插入数据库