MongoDB （芒果数据库）

数据存储阶段

文件管理阶段（.txt  .doc  .xls）

优点 ： 使用简单方便
        数据能够长期保存
	    可以存储大量数据

缺点 ： 数据储存结构比较随意
        数据的查找修改不方便
	    不方便扩展和程序调用

数据库管理阶段

优点 ： 数据格式化储存，便于操作，降低冗余
        提高增删改查效率
	    方便扩展和程序调用
缺点 ： 数据库使用特定的语句操作，相对复杂

几个概念

数据 ：能够输入到计算机中并被识别处理的信息的集合

数据结构：研究一个数据集合中，数据之间关系的学科

数据库： 按照数据结构，存储数据的仓库。在数据库管理系统管理下在一定介质上储存的数据集合。

数据库管理系统 ：管理数据库的软件，用于维护建立数据库

数据库系统 ：由数据库和数据库管理系统等开发工具组成的集合

关系型数据库

    采用关系模型来组织数据结构的数据库 （二维表）

    Oracle  DB2   SQLServer  MySql   Sqlite

    优点：容易理解，逻辑类似常见的表格
        使用方便，都使用sql语句，sql语句很成熟
        数据一致性高，冗余低，完整性好
        技术成熟，可以使用外部关联等复杂操作

    缺点：每次都需要sql语句的解析，消耗大
        不能很好的满足并发需求，特别是海量数据爆发，读写能力不足
        关系型数据库每一步操作都要加锁，以保证操作的原子性，增加了数据库负担
        数据的一致性有时会导致空间浪费


非关系型数据库 （NoSql--》not only sql）

优点 ： 高并发，读写能力强
        普遍比关系型数据库容易扩展
	    弱化了数据结构，降低数据一致性

缺点 ： 通用性差，没有sql语句一样的一致化操作
        操作过于冗长，容易混乱
        技术成熟度比关系型数据库要差

NoSql 使用情况
    1. 对数据一致性要求低
    2. 数据库需要处理海量并发
    3. 需要处理速度较快，比如做一个临时的中间过度存储    器
    4. 数据库构建比较方便的构建非关系模型

Nosql分类：
    键值型数据库：Redis
    列存储数据库：HBase
    文档型数据库：MongoDB
    图形数据库:


MongoDB 数据库  （非关系型数据库--》文档型数据库）
    1. 由c++编写的数据库管理系统
    2. 支持丰富的增删改查操作
    3. 支持丰富的数据类型
    4. 支持众多的编程语言接口（python  PHP  C++  c#）
    5. 使用方便，便于部署。相对成熟。


自动安装
sudo apt-get install mongodb

    默认安装位置 :  /var/lib/mongodb 
    配置文件：/etc/mongodb.conf
    命令集： /usr/bin   /usr/local/bin
    (软件安装后提供功能性的命令)

    手动安装
    1.下载Mongodb(开源)
    www.mongodb.com-->get mongodb --> community server

    选择想要下载的版本

    2. 选择合适的位置解压（/usr/local  /opt）
    tar 解压后得到 MongoDB文件夹

    3. 将命令集 （解压后文件夹中bin目录）添加到环境变量
    PATH=$PATH:/opt/mongo/bin
    export PATH
    如果不想每次启动都执行则将以上两句写入主目录下将以上两句添加如 .bashrc

mongoDB命令
    设置数据库的储存位置:mongod --dbpath 目录
    将databa目录设置为数据库储存目录
    e.g.    mongod  --dbpath  databa
    设置数据库端口
    mongod  --port  8080 
    *默认端口  27017

mongo 
进入mongo shell界面：mongodb的交互界面，操作数据库

退出界面 ： quit() 或  ctrl + c 

mongodb数据库组织形式

键值对 ---》 文档 ---》 集合 ---》数据库

------------------------
ID   |   NAME   |   AGE
------------------------
1    |   Lily   |   17
------------------------
2    |   Lucy   |   18
------------------------

{"_id":1,"NAME":"Lily","AGE":17},
{"_id":2,"NAME":"Lucy","AGE":18}

mysql 和 mongodb 概念比价

mysql        mongodb        含义

database     database       数据库

table        collection     表/集合

column       field          字段/域

row          document       记录/文档

index        index          索引


创建数据库

    use databaseName 

    e.g.  use stu  #创建一个stu数据库
    * use 实际上是表示选择某个数据库使用。当这个数据库不存在时会自动创建。
    * 使用use后数据不会马上被创建，而是在实际写入数据时才会创建


查看当前系统中数据库
    show  dbs

    系统数据库：
    admin：存放用户及其权限
    local： 存储本地数据
    config：存储分片信息

数据库的命名规则
    1. 使用utf-8字符
    2. 不能有空格，点，/ \  '\0'字符
    3. 长度不超过64字节
    4. 不和系统数据库重名

db：mongodb系统全局变量，代表当前正在使用的数据库

* 如果没有use任何数据库情况下 db表示test。此时插入数据则创建test数据库

删除数据库
    db.dropDatabase()
    删除db代表的数据库

数据库备份和恢复

    备份：mongodump -h dbhost -d    dbname   -o dbdir
                    主机      要备份数据库   目录

    e.g.   
    将stu数据库备份到当前目录中
    备份          本机  　      stu数据库　 到当前目录
    mongodump -h 127.0.0.1 -d stu 　　　　　-o .
    
    恢复：mongorestore -h  dbhost:port -d dbname  path
                        主机           数据库  目录

    e.g.
    将stu数据库恢复到student数据库中
    获取数据        到本机              student数据库中
    mongorestore -h 127.0.0.1:27017 -d student  ./stu

    数据库的监测
        mongostat　查看数据库运行状态

        insert query update delete: 每秒执行增删改查次数
        command ： 每秒运行mongo命令次数
        flushes ： 每秒和磁盘交互的次数
        vsize res：使用的虚拟内存和物理内存情况
        time：运行时间

        mongotop 
        监测每个数据库的读写时长

        ns         total     read       write
        数据集合    总时长    读时长    写时长

创建集合 
    db.createCollection(collection_name)
    e.g.   
    创建一个class1的集合
    db.createCollection("class1")

创建集合2
    当向一个集合中插入数据的时候，需要指定集合，如果这个集合不存在则会自动创建
    db.collecionName.insert(...)
    e.g.  如果class2不存在则自动创建
    db.class2.insert({"name":'Tom','age':17,'sex':'m'})

查看数据库中集合
show collections
show tables

集合命名规则
1. utf-8 字符
2. 不能有'\0'
3. 不要以system.开头，因为这是系统保留集合前缀
4. 不要和关键字重复

删除集合
    db.collectionName.drop() 

    e.g.   db.class.drop()   #删除class这个集合

集合的重命名

    db.collectionName.renameCollection("new_name")

    e.g.  将class2重命名为class0
    db.class2.renameCollection("class0")

文档
　　什么是文档
    *文档是mongodb数据库中基本的数据组成形式类似字典
    *文档是由键值对构成，每个键值对表达一个数据项
    *monggodb文档属于bson类型数据
    * 文档中的键值对是有序的
    * mongodb中数据严格区分大小写

键： 即文档的域,表达值是什么内容

    键的命名规则：
    1. 使用utf-8字符串
    2. 不含有'\0' 通常不用 . 
    3. 一个文档中的键不能重复

值：即数据库储存的数据

    类型             值

    整型            整数
    布尔类型        true  false
    浮点型          小数
    Array           数组
    Timestamp       时间戳
    Date            时间日期
    Object          内部文档
    Null            空值 null
    String          字符串
    Symbol          特殊字符串
    Binary data     二进制字串
    code            代码
    regex           正则表达式
    ObjectId        ObjectId字串

ObjectId 

    "_id" : ObjectId("5b503b7f38d0e992e1270560")

    _id : 当在mongo代表中插入文档时，如果不指定_id则会自动添加这个域，作为主键。

    ObjectId() 值是系统自动生成的不重复字串标识

    24位16进制编码
        8位  文档创建时间
        6位  机器ID
        4位  进程ID
        6位  计数器

    集合中的文档：
    1. 集合中的文档格式可以不同
    2. 一个集合中储存的数据尽量体现相同的内容
    3. 文档的表达尽量层次不要太多

插入文档
    db.collectionName.insertOne()
        功能：插入一条文档
        参数：要插入的文档

    插入单个文档

    e.g.
    db.class0.insertOne({name:"HanMei",age:17,sex:'w'})

    * 插入数据时域名可以不加引号
    * 查看插入结果  db.class.find()
    * _id 为系统自动添加主键，如果自己写_id则为自己设定的值，但是仍然不可重复
    * 一个集合中的文档是有序的

插入多个文档
    db.collectionName.insertMany([{},{},{}])

        功能：插入多个文档
        参数：数组中包含多个文档
    e.g. 
    db.class2.insertMany([{name:'阿宝',age:32},{name:'阿哲',age:31},{name:'阿蓉',age:26}])

插入文档：
    db.collection.insert()
        功能：等于insertOne + insertMany


save() 插入文档
    db.collectionName.save()

    e.g.   db.class1.save({name:'Lily',age:13,sex:'w'})

    * 如果不加_id域时用法同insert()
    * 如果加_id，此_id值存在则save表示修改该文档。

获取集合对象
    db.getCollection(collection_name)
    功能：获取到集合对象，等同于db.collection 
    e.g.
    db.getCollection('class0')<===>db.class0

查找操作
   mysql:select ... from table where ...
　　mongo:db.collection.find(query,field)
   查找集合中所有内容：db.collection.find()-->select * from table
    find(query,field)
    　功能：查找所有符合条件的文档
    　参数：query表示筛选条件，是一个键值对文档，默认表示查找所有内容
                e.g. db.class0.find({sex:'m'})
           field表示查找的域，是一个键值对文档，用0值表示不查找某个域，1表示查找某个域
                e.g.不查找_id域，只查找name域内容
                  db.class0.find({},{_id:0,name:1})

        *当某个普通域设置为0时表示该域不查找，其他的域查找。如果设置为1则表示该域查找，其他的不查找
        *对于普通域在表达式值0和1不能在参数中同时出现
        *_id域比较特殊，如果不想查找必须明确_id:0
    
finOne(query,field)
   功能：查找第一条符合条件的文档
   参数：使用同find
    e.g. 查找第一个年龄为17的文档
   db.class0.findOne({age:17},{_id:0})

作业 ：
1. 关系型数据库和非关系型数据库区别
2. 复习mysql 增删改查
3. 练习mongo 数据库集合创建删除，文档插入命令




















