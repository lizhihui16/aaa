前情回顾

1. 关系型数据库和非关系型数据库的比较
   
   * 不是关系模型构建的数据结构，不保证数据的一致性，结构更加     灵活自由
   * 非关系型数据库弥补了关系型数据库在处理高并发存储时读写效     率低的问题
   * 非关系型数据库种类多样，技术不如关系型数据库成熟，没有统     一的操作语句，处于不断发展更新阶段

2. Mongodb特点，安装，基本设置

3. 创建数据库 
       use  database
       
       db.dropDatabase() 删除数据库
       show  dbs  查看数据库
      
       mongodump     备份
       mongorestore  恢复
  
       mongostat   数据库监测     
       mongotop    数据库读写时长

4. 集合操作
       db.createCollection()   创建集合
       db.collection.insert()  创建集合
       db.getCollection()      获取集合对象
       db.collection.drop()    删除集合
       db.collection.renameCollection()  集合重命名
       show  collections       集合查看

5. 插入文档 
       insertOne（）
       insertMany（）
       insert（）
       save（）

6. 查找操作
       find(query,field)
       findOne()
***********************************************************


query 更多筛选功能

操作符：使用$符号标注的一个有特殊意义的字符串。用以表达一定的含义。比如 $lt 表示小于

比较操作符
$eq  等于  =

e.g.    db.class1.find({age:{$eq:17}},{_id:0})
        db.class1.find({age:13},{_id:0})

$lt  小于 <
    e.g.  年龄小于15
    db.class1.find({age:{$lt:15}},{_id:0})
    db.class0.find({name:{$lt:'Tom'}},{_id:0})

* 字符串也可以比较大小

$lte  小于等于  <=
    e.g.  小于等于15
    db.class1.find({age:{$lte:15}},{_id:0})

$gt  大于  >
    e.g. 大于15
    db.class1.find({age:{$gt:19}},{_id:0})
    db.class0.find({age:{$lt:19,$gt:17}},{_id:0})


$gte  大于等于  >=

e.g  大于等于15   
db.class1.find({age:{$gte:15}},{_id:0})

$ne   不等于  !=

e.g.  不等于13
 db.class1.find({age:{$ne:13}},{_id:0})
    * 如果某个文档不存在查找的域，则不等于可以匹配到该文档

$in  包含
    e.g.  年龄包含 在11，12，13，14的
    db.class1.find({age:{$in:[11,12,13,14]}},{_id:0})

$nin  不包含
    e.g. 年龄不是13，14
    db.class1.find({age:{$nin:[13,14]}},{_id:0})

逻辑操作符

query 逗号分隔的条件即为与关系
    e.g. 年龄大于13 小于16
    > db.class1.find({age:{$gt:13,$lt:16}},{_id:0})
    e.g. 年龄大于13且性别为女
    > db.class1.find({age:{$gt:13},sex:'w'},{_id:0})

$and 逻辑与 在query文档中逗号隔开的多个键值对即表示与关系

e.g.   年龄大于13 并且姓名大于Lily db.class1.find({$and:[{age:{$gt:13}},{name:{$lt:'Lily'}}]},{_id:0})

$or 逻辑或
    e.g.  年龄大于15或者为男生
    db.class1.find({$or:[{age:{$gt:15}},{sex:'m'}]},{_id:0})

$not  逻辑非
    e.g.  年龄不大于15
    db.class1.find({age:{$not:{$gt:15}}},{_id:0})

$nor  既不也不
    e.g.  既不大于17 也不是女生
    db.class1.find({$nor:[{age:{$gt:17}},{sex:'w'}]},{_id:0})


条件混合

年龄大于18或者小于17 并且 为女生
    db.class0.find({$and:[{$or:[{age:{$lt:17}},{age:{$gt:18}}]},{sex:'w'}]},{_id:0})
    db.class0.find({$or:[{age:{$lt:17}},{age:{$gt:18}}],sex:'w'},{_id:0})

年龄大于16或者为女生  并且 姓名大于 Jame
    db.class1.find({name:{$gt:'Jame'},$or:[{age:{$gt:16}},{sex:'w'}]},{_id:0})

数组类型查找
    数组：一组数据的有序集合，使用[]表示　
    　　　*有序的
         *数据类型可以不相同

查看数据中是否包含某一项

e.g.  如果score数组中包含90即可
    db.class3.find({score:90},{_id:0})
    db.class3.find({score:{$gt:90}},{_id:0})


查找数据中同时包含多项  $all
e.g. 同时包含88  90
    db.class3.find({score:{$all:[88,90]}},{_id:0})

通过数组元素个数查找  $size
    db.class3.find({score:{$size:3}},{_id:0})

$slice  取出数组的部分进行显示放在field中
    e.g.  显示数组中前两项
    db.class3.find({name:'小明'},{_id:0,score:{$slice:2}})
    跳过第一项显示后面一项
    db.class3.find({name:'小明'},{_id:0,score:{$slice:[1,1]}})

其他查找方法

    $exists : 判断一个域是否存在
        e.g.  查找存在age域的文档
        db.class0.find({sex:{$exists:true}},{_id:0} )
    * true 表示有这个域 false表示筛选无这个域

  $mod : 除数余数查找文档
    e.g.  查找除以2余数为1的 
    db.class1.find({age:{$mod:[2,1]}},{_id:0} )

  $type :根据数据类型筛选
    e.g.  查找age数据类型为1的文档
    db.class1.find({age:{$type:1}},{_id:0} )


具体数字和类型的匹配
Type	            Number	
Double	             1		 
String	             2		 
Object	             3		 
Array	             4	
Binary data          5	
ObjectId             7		 
Boolean        	     8	
Date	             9		 
Null	             10	
RE	                 11	  
Symbol	             14		
32-bit integer	     16	 
Timestamp	         17		 
64-bit integer	     18	

数据处理函数


  distinct()
    功能：查看集合某个域的取值范围
    e.g. 查看集合中age域值的范围  
    db.class1.distinct("age")

  pretty()
    功能： 将find查找结果格式化显示
    e.g.   db.class1.find().pretty()  


  limit(n)
    功能： 显示查找结果的前n条
    e.g.  显示查找结果的前三条  
    db.class1.find({},{_id:0}).limit(3)

  skip(n)
    功能 ： 跳过前n条显示
    e.g.  跳过前三条显示后边的内容
    db.class1.find({},{_id:0}).skip(3)

  count()
    功能 ： 计数统计
    e.g. 统计男生数量(使用count  query参数要写筛选条件)
    db.class1.find({sex:'m'},{_id:0}).count()


  sort({域：1/-1})
    功能 ： 对查找结果按照指定的域排序
    参数 ： 以键值对的形式给出
            1 表示按照升序排序， -1表示降序排序

    e.g.  按照年龄升序
    db.class1.find({},{_id:0}).sort({age:1})

  *复合排序：当第一排序项相同时比较第二排序项，依次类推

    e.g. 
    db.class0.find({},{_id:0}).sort({age:1,name:1})

    函数的连续调用
        *当函数返回文档集合时还可以继续调用函数
            e.g.  查找班级年龄最大的三个
            db.class1.find({},{_id:0}).sort({age:-1}).limit(3)
        *对筛选的文档集合，可以使用索引序号取某一项
            db.class0.find({},{_id:0}).sort({age:-1,}).limit(7)[5]
            db.class0.find({},{_id:0})[5]  


  文档的删除操作

    delete  from table  where  ...

    db.collection.deleteOne(query)
        功能：删除符合条件的第一个文档
        参数：筛选条件，用法同find query

    　e.g 删除第一个性别为女的文档
        db.class1.deleteOne({sex:'w'})

    db.collection.deleteMany(query)
        功能：删除符合条件的所有文档
        参数：筛选条件，用法同find query

      e.g  删除性别为男所有文档
        db.class2.deleteMany({sex:'m'})
    *如果筛选条件为空则表示删除集合中所有文档
    　　db.class2.deleteMany({})

    db.collection.remove(query,justOne)
    功能 ： 删除文档
    参数 ： query  筛选要删除的文档 
        　justOne ： 布尔值，默认为false 表示删除所有。如果设置为true 只删除第一条符合条件的文档。
        e.g. 
        db.class2.remove({name:"阿蓉"})

        e.g.  justOne为true则只删除第一条符合条件的
        db.class0.remove({age:17},true)

    删除集合中所有文档

        e.g.  删除class2中所有文档
        db.class2.remove({})

    db.collection.findOneAndDelete(query)
     功能：查找某个文档并删除
     参数：query
     返回：显示查找到的文档
    
    e.g. 查找不存在sex域的文档
        db.class0.findOneAndDelete({sex:{$exists:false}})

练习 ：
1. 创建数据库  名字 grade
  use  grade
2. 数据库中创建集合 class
3. 集合中插入文档，格式如下
   {name:'zhang',age:10,sex:'m',hobby:['a','b']}
   age范围  ７-15
   hobby 范围 
   [draw  dance  sing  pingpong    basketball  football  running  computer]  

4. 查找练习
   查看班级所有人信息
    find()

   查看班级年龄8岁的同学信息
   find({age:8})
   
   查看年龄大于10岁的学生信息
   find({age:{$gt:10}})
   查看年龄在8-1２岁之间的学生信息
   find({age:{$gte:8,$lte:12}})

   查看年龄为9岁且喜欢画画的学生
    find({age:9,hobby:'draw'})

   找到年龄小于８岁或大于12岁的学生
   find({$or:[{age:{$lt:8}},{age:{$gt:12}}]})
 
   找到年龄为９岁或者11岁的学生
   find({age:{$in:[8,11]}})
   db.class.find({$or:[{age:9},{age:11}]})


   找到有两项兴趣爱好的学生
   find({hobby:{$size:2}})

   找到兴趣中有计算机的学生
   find(hobby:'computer')

   找喜欢画画又喜欢跳舞的学生
   find(hobby:{$all:['draw','dance']})

   统计兴趣有三项的学生人数
   find({hobby:{$size:3}}).count()

   找到本班年龄第二大的同学 
   find().sort({age:-1}).skip(1).limit(1)
    find().sort({age:-1})[1]

   查看兴趣的范围
   db.class.distinct("hobby")
   找到年龄最小的三个同学
    find().sort({age:1}).limit(3)

5. 删除所有年龄大于12或者小于7岁的同学

remove({$or:[{age:{$lt:7}},{age:{$gt:12}}]})


修改操作
    update  table  set  ... where ...

    db.collection.updateOne(query,update,upsert)
      功能：修改第一个符合条件的文档
      参数：query  筛选条件　
        　　update 要修改的数据项，需要和修改操作符一同使用
        　　upsert：bool值 默认false 如果query的文档不存在则不做操作
                设置为true 则如果文档不存在根据query和update内容插入新文档

    示例：
        e.g.  年龄修改为18
        db.class0.updateOne({age:19},{$set:{age:18}})
        e.g.  如果筛选内容不存在则插入 
        db.class0.update({name:'Jame'},{$set:{age:17}},{upsert:true})


    db.collection.updateMany(query,update,upsert)
    功能 ： 修改所有符合条件的文档
    参数 ： 同上
    示例：
        db.class0.updateMany({age:17},{$set:{age:21}})

    db.collection.update(query,update,upsert,multi)
      功能 ： 修改文档
      参数 ： query ： 筛选需要修改的文档，相当where
            update： 要修改什么内容 相当set。往往需要配合修改操作符
            upsert：bool值 默认false 如果query的文档不存在则不做操作
                设置为true 则如果文档不存在根据query和update内容插入新文档
           multi： bool值 默认false 如果筛选到多条文档则只修改第一条。
                设置为true则表示修改所有筛选到的文档

    e.g.  如果筛选内容不存在则插入 
    　　db.class0.update({name:'Jame'},{$set:{age:18}},true)

    e.g.  如果匹配到多条，则修改所有
    　　db.class0.update({sex:{$exists:false}},{$set:{age:20}},false,true)

    db.collection.findOneAndUpdate(query,updata)
     功能：查找一个文档并修改
     参数：query  查找条件
        　updata 修改内容
     返回:修改前的文档内容

    示例：　　查找一个文档并修改年龄为17
    　　db.class0.findOneAndUpdate({name:'Jame'},{$set:{age:17}})

    db.class0.findOneAndReplace(query,docuemnt)
    功能：查找并替换一个文档
    参数：query
         docuemnt: 要替换的文档

    示例：用新的文档替查找到的文档
    db.class0.findOneAndReplace({name:'JJJ'},{name:'xd',age:20})


作业 ： 1. 操作一遍增删改查已经解除的操作符
       2. 将‘三国’使用mongodb进行构建操作
	    




















